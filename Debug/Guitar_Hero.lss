
Guitar_Hero.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a0  00800100  000016d8  0000176c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000016d8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000129  008001a0  008001a0  0000180c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000180c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001868  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002d8  00000000  00000000  000018a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000026b5  00000000  00000000  00001b80  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001167  00000000  00000000  00004235  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000016bc  00000000  00000000  0000539c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000076c  00000000  00000000  00006a58  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b44  00000000  00000000  000071c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001622  00000000  00000000  00007d08  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000258  00000000  00000000  0000932a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 c4 01 	jmp	0x388	; 0x388 <__ctors_end>
       4:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__bad_interrupt>
       8:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__bad_interrupt>
       c:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__bad_interrupt>
      10:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__bad_interrupt>
      14:	0c 94 1b 02 	jmp	0x436	; 0x436 <__vector_5>
      18:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__bad_interrupt>
      1c:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__bad_interrupt>
      20:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__bad_interrupt>
      24:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__bad_interrupt>
      28:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__bad_interrupt>
      2c:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__bad_interrupt>
      30:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__bad_interrupt>
      34:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__bad_interrupt>
      38:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__bad_interrupt>
      3c:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__bad_interrupt>
      40:	0c 94 c1 07 	jmp	0xf82	; 0xf82 <__vector_16>
      44:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__bad_interrupt>
      48:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__bad_interrupt>
      4c:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__bad_interrupt>
      50:	0c 94 dd 06 	jmp	0xdba	; 0xdba <__vector_20>
      54:	0c 94 9b 06 	jmp	0xd36	; 0xd36 <__vector_21>
      58:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__bad_interrupt>
      5c:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__bad_interrupt>
      60:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__bad_interrupt>
      64:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__bad_interrupt>
      68:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__bad_interrupt>
      6c:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__bad_interrupt>
      70:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__bad_interrupt>
      74:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__bad_interrupt>
      78:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__bad_interrupt>

0000007c <__trampolines_end>:
      7c:	50 72       	andi	r21, 0x20	; 32
      7e:	65 73       	andi	r22, 0x35	; 53
      80:	73 20       	and	r7, r3
      82:	61 20       	and	r6, r1
      84:	62 75       	andi	r22, 0x52	; 82
      86:	74 74       	andi	r23, 0x44	; 68
      88:	6f 6e       	ori	r22, 0xEF	; 239
      8a:	20 6f       	ori	r18, 0xF0	; 240
      8c:	72 20       	and	r7, r2
      8e:	27 73       	andi	r18, 0x37	; 55
      90:	27 2f       	mov	r18, r23
      92:	27 53       	subi	r18, 0x37	; 55
      94:	27 20       	and	r2, r7
      96:	74 6f       	ori	r23, 0xF4	; 244
      98:	20 73       	andi	r18, 0x30	; 48
      9a:	74 61       	ori	r23, 0x14	; 20
      9c:	72 74       	andi	r23, 0x42	; 66
      9e:	20 61       	ori	r18, 0x10	; 16
      a0:	20 6e       	ori	r18, 0xE0	; 224
      a2:	65 77       	andi	r22, 0x75	; 117
      a4:	20 67       	ori	r18, 0x70	; 112
      a6:	61 6d       	ori	r22, 0xD1	; 209
      a8:	65 00       	.word	0x0065	; ????

000000aa <__c.2285>:
      aa:	47 41 4d 45 20 4f 56 45 52 00                       GAME OVER.

000000b4 <__c.2262>:
      b4:	43 53 53 45 32 30 31 30 2f 37 32 30 31 20 41 32     CSSE2010/7201 A2
      c4:	20 62 79 20 4c 55 4e 44 41 41 53 55 52 45 4e 20      by LUNDAASUREN 
      d4:	4d 55 4e 4b 48 42 41 54 20 2d 20 34 37 36 36 38     MUNKHBAT - 47668
      e4:	35 39 39 00                                         599.

000000e8 <__c.2260>:
      e8:	20 5c 24 24 20 20 20 5c 24 24 20 20 20 20 20 5c      \$$   \$$     \
      f8:	24 20 20 20 20 20 5c 24 24 20 20 20 5c 24 24 20     $     \$$   \$$ 
     108:	20 20 20 20 20 20 5c 24 24 20 20 20 5c 24 24 20           \$$   \$$ 
     118:	20 5c 24 24 24 24 24 24 24 20 5c 24 24 20 20 20      \$$$$$$$ \$$   
     128:	20 20 20 20 20 5c 24 24 24 24 24 24 00                   \$$$$$$.

00000135 <__c.2258>:
     135:	7c 20 24 24 20 20 7c 20 24 24 20 20 20 20 5c 24     | $$  | $$    \$
     145:	24 24 20 20 20 7c 20 24 24 20 20 7c 20 24 24 20     $$   | $$  | $$ 
     155:	20 20 20 20 20 7c 20 24 24 20 20 7c 20 24 24 20          | $$  | $$ 
     165:	5c 24 24 20 20 20 20 20 5c 7c 20 24 24 20 20 20     \$$     \| $$   
     175:	20 20 20 20 5c 24 24 20 20 20 20 24 24 00               \$$    $$.

00000183 <__c.2256>:
     183:	7c 20 24 24 20 20 7c 20 24 24 20 20 20 5c 24 24     | $$  | $$   \$$
     193:	20 24 24 20 20 7c 20 24 24 20 20 7c 20 24 24 20      $$  | $$  | $$ 
     1a3:	20 20 20 20 20 7c 20 24 24 20 20 7c 20 24 24 7c          | $$  | $$|
     1b3:	20 24 24 24 24 24 24 24 24 7c 20 24 24 20 20 20      $$$$$$$$| $$   
     1c3:	20 20 20 7c 20 24 24 5f 5f 2f 20 24 24 00              | $$__/ $$.

000001d1 <__c.2254>:
     1d1:	7c 20 24 24 24 24 24 24 24 24 20 20 5c 24 24 5c     | $$$$$$$$  \$$\
     1e1:	20 20 24 24 20 7c 20 24 24 24 24 24 24 24 5c 20       $$ | $$$$$$$\ 
     1f1:	20 20 20 20 20 7c 20 24 24 24 24 24 24 24 24 7c          | $$$$$$$$|
     201:	20 24 24 20 20 20 20 24 24 7c 20 24 24 20 20 20      $$    $$| $$   
     211:	5c 24 24 7c 20 24 24 20 20 7c 20 24 24 00           \$$| $$  | $$.

0000021f <__c.2252>:
     21f:	7c 20 24 24 20 20 20 20 24 24 20 5c 24 24 5c 20     | $$    $$ \$$\ 
     22f:	2f 20 20 24 24 7c 20 24 24 20 20 20 20 24 24 20     /  $$| $$    $$ 
     23f:	20 20 20 20 20 7c 20 24 24 20 20 20 20 24 24 7c          | $$    $$|
     24f:	20 20 24 24 24 24 24 24 5c 7c 20 20 24 24 24 24       $$$$$$\|  $$$$
     25f:	24 24 5c 7c 20 20 24 24 24 24 24 24 5c 00           $$\|  $$$$$$\.

0000026d <__c.2250>:
     26d:	7c 20 24 24 5f 5f 7c 20 24 24 7c 20 24 24 20 20     | $$__| $$| $$  
     27d:	20 7c 20 24 24 7c 20 24 24 5f 5f 7c 20 24 24 20      | $$| $$__| $$ 
     28d:	20 20 20 20 20 7c 20 24 24 5f 5f 7c 20 24 24 20          | $$__| $$ 
     29d:	2f 20 20 20 20 20 20 5c 20 20 2f 20 20 20 20 20     /      \  /     
     2ad:	20 5c 20 20 2f 20 20 20 20 20 20 5c 00               \  /      \.

000002ba <__c.2248>:
     2ba:	7c 20 20 24 24 24 24 24 24 5c 7c 20 24 24 20 20     |  $$$$$$\| $$  
     2ca:	20 7c 20 24 24 7c 20 24 24 24 24 24 24 24 5c 20      | $$| $$$$$$$\ 
     2da:	20 20 20 20 20 7c 20 24 24 20 20 7c 20 24 24 20          | $$  | $$ 
     2ea:	20 5f 5f 5f 5f 5f 5f 20 20 20 20 5f 5f 5f 5f 5f      ______    _____
     2fa:	5f 20 20 20 20 5f 5f 5f 5f 5f 5f 00                 _    ______.

00000306 <__c.2246>:
     306:	20 2f 20 20 20 20 20 20 5c 20 7c 20 20 5c 20 20      /      \ |  \  
     316:	20 7c 20 20 5c 7c 20 20 20 20 20 20 20 5c 20 20      |  \|       \  
     326:	20 20 20 20 20 7c 20 20 5c 20 20 7c 20 20 5c 00          |  \  |  \.

00000336 <__c.2244>:
     336:	20 20 5f 5f 5f 5f 5f 5f 20 20 20 5f 5f 20 20 20       ______   __   
     346:	20 20 5f 5f 20 20 5f 5f 5f 5f 5f 5f 5f 20 20 20       __  _______   
     356:	20 20 20 20 20 20 5f 5f 20 20 20 20 5f 5f 00              __    __.

00000365 <__c.2058>:
     365:	1b 5b 3f 32 35 68 00                                .[?25h.

0000036c <__c.2054>:
     36c:	1b 5b 3f 32 35 6c 00                                .[?25l.

00000373 <__c.2050>:
     373:	1b 5b 25 64 6d 00                                   .[%dm.

00000379 <__c.2040>:
     379:	1b 5b 32 4a 00                                      .[2J.

0000037e <__c.2025>:
     37e:	1b 5b 25 64 3b 25 64 48 00 00                       .[%d;%dH..

00000388 <__ctors_end>:
     388:	11 24       	eor	r1, r1
     38a:	1f be       	out	0x3f, r1	; 63
     38c:	cf ef       	ldi	r28, 0xFF	; 255
     38e:	d8 e0       	ldi	r29, 0x08	; 8
     390:	de bf       	out	0x3e, r29	; 62
     392:	cd bf       	out	0x3d, r28	; 61

00000394 <__do_copy_data>:
     394:	11 e0       	ldi	r17, 0x01	; 1
     396:	a0 e0       	ldi	r26, 0x00	; 0
     398:	b1 e0       	ldi	r27, 0x01	; 1
     39a:	e8 ed       	ldi	r30, 0xD8	; 216
     39c:	f6 e1       	ldi	r31, 0x16	; 22
     39e:	02 c0       	rjmp	.+4      	; 0x3a4 <__do_copy_data+0x10>
     3a0:	05 90       	lpm	r0, Z+
     3a2:	0d 92       	st	X+, r0
     3a4:	a0 3a       	cpi	r26, 0xA0	; 160
     3a6:	b1 07       	cpc	r27, r17
     3a8:	d9 f7       	brne	.-10     	; 0x3a0 <__do_copy_data+0xc>

000003aa <__do_clear_bss>:
     3aa:	22 e0       	ldi	r18, 0x02	; 2
     3ac:	a0 ea       	ldi	r26, 0xA0	; 160
     3ae:	b1 e0       	ldi	r27, 0x01	; 1
     3b0:	01 c0       	rjmp	.+2      	; 0x3b4 <.do_clear_bss_start>

000003b2 <.do_clear_bss_loop>:
     3b2:	1d 92       	st	X+, r1

000003b4 <.do_clear_bss_start>:
     3b4:	a9 3c       	cpi	r26, 0xC9	; 201
     3b6:	b2 07       	cpc	r27, r18
     3b8:	e1 f7       	brne	.-8      	; 0x3b2 <.do_clear_bss_loop>
     3ba:	0e 94 d7 05 	call	0xbae	; 0xbae <main>
     3be:	0c 94 6a 0b 	jmp	0x16d4	; 0x16d4 <_exit>

000003c2 <__bad_interrupt>:
     3c2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003c6 <init_button_interrupts>:
// change interrupts PCINT8 to PCINT11 which are covered by
// Pin change interrupt 1.
void init_button_interrupts(void)
{
	// Enable the interrupt (see datasheet page 77)
	PCICR |= (1 << PCIE1);
     3c6:	e8 e6       	ldi	r30, 0x68	; 104
     3c8:	f0 e0       	ldi	r31, 0x00	; 0
     3ca:	80 81       	ld	r24, Z
     3cc:	82 60       	ori	r24, 0x02	; 2
     3ce:	80 83       	st	Z, r24
	
	// Make sure the interrupt flag is cleared (by writing a 
	// 1 to it) (see datasheet page 78)
	PCIFR |= (1 << PCIF1);
     3d0:	8b b3       	in	r24, 0x1b	; 27
     3d2:	82 60       	ori	r24, 0x02	; 2
     3d4:	8b bb       	out	0x1b, r24	; 27
	
	// Choose which pins we're interested in by setting
	// the relevant bits in the mask register (see datasheet page 78)
	PCMSK1 |= (1 << PCINT8) | (1 << PCINT9) | (1 << PCINT10) | (1 << PCINT11);	
     3d6:	ec e6       	ldi	r30, 0x6C	; 108
     3d8:	f0 e0       	ldi	r31, 0x00	; 0
     3da:	80 81       	ld	r24, Z
     3dc:	8f 60       	ori	r24, 0x0F	; 15
     3de:	80 83       	st	Z, r24
	
	// Empty the button push queue
	queue_length = 0;
     3e0:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <__data_end>
     3e4:	08 95       	ret

000003e6 <button_pushed>:

int8_t button_pushed(void)
{
	int8_t return_value = NO_BUTTON_PUSHED;	// Assume no button pushed

	if (queue_length > 0)
     3e6:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <__data_end>
     3ea:	18 16       	cp	r1, r24
     3ec:	14 f5       	brge	.+68     	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
	{
		// Remove the first element off the queue and move all the other
		// entries closer to the front of the queue. We turn off interrupts (if on)
		// before we make any changes to the queue. If interrupts were on
		// we turn them back on when done.
		return_value = button_queue[0];
     3ee:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <button_queue>
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
     3f2:	6f b7       	in	r22, 0x3f	; 63
		cli();
     3f4:	f8 94       	cli
		
		for (uint8_t i = 1; i < queue_length; i++)
     3f6:	91 e0       	ldi	r25, 0x01	; 1
     3f8:	09 c0       	rjmp	.+18     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
		{
			button_queue[i - 1] = button_queue[i];
     3fa:	f9 01       	movw	r30, r18
     3fc:	ef 55       	subi	r30, 0x5F	; 95
     3fe:	fe 4f       	sbci	r31, 0xFE	; 254
     400:	40 81       	ld	r20, Z
     402:	f9 01       	movw	r30, r18
     404:	e0 56       	subi	r30, 0x60	; 96
     406:	fe 4f       	sbci	r31, 0xFE	; 254
     408:	40 83       	st	Z, r20
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
		cli();
		
		for (uint8_t i = 1; i < queue_length; i++)
     40a:	9f 5f       	subi	r25, 0xFF	; 255
     40c:	29 2f       	mov	r18, r25
     40e:	30 e0       	ldi	r19, 0x00	; 0
     410:	40 91 a0 01 	lds	r20, 0x01A0	; 0x8001a0 <__data_end>
     414:	04 2e       	mov	r0, r20
     416:	00 0c       	add	r0, r0
     418:	55 0b       	sbc	r21, r21
     41a:	24 17       	cp	r18, r20
     41c:	35 07       	cpc	r19, r21
     41e:	6c f3       	brlt	.-38     	; 0x3fa <button_pushed+0x14>
		{
			button_queue[i - 1] = button_queue[i];
		}
		queue_length--;
     420:	90 91 a0 01 	lds	r25, 0x01A0	; 0x8001a0 <__data_end>
     424:	91 50       	subi	r25, 0x01	; 1
     426:	90 93 a0 01 	sts	0x01A0, r25	; 0x8001a0 <__data_end>
		
		if (interrupts_were_enabled)
     42a:	66 23       	and	r22, r22
     42c:	1c f4       	brge	.+6      	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
		{
			// Turn them back on again
			sei();
     42e:	78 94       	sei
     430:	08 95       	ret
	queue_length = 0;
}

int8_t button_pushed(void)
{
	int8_t return_value = NO_BUTTON_PUSHED;	// Assume no button pushed
     432:	8f ef       	ldi	r24, 0xFF	; 255
			// Turn them back on again
			sei();
		}
	}
	return return_value;
}
     434:	08 95       	ret

00000436 <__vector_5>:

// Interrupt handler for a change on buttons
ISR(PCINT1_vect)
{
     436:	1f 92       	push	r1
     438:	0f 92       	push	r0
     43a:	0f b6       	in	r0, 0x3f	; 63
     43c:	0f 92       	push	r0
     43e:	11 24       	eor	r1, r1
     440:	2f 93       	push	r18
     442:	3f 93       	push	r19
     444:	4f 93       	push	r20
     446:	8f 93       	push	r24
     448:	9f 93       	push	r25
     44a:	ef 93       	push	r30
     44c:	ff 93       	push	r31
	// Get the current state of the buttons. We'll compare this with
	// the last state to see what has changed.
	uint8_t button_state = PINB & 0x0F;
     44e:	43 b1       	in	r20, 0x03	; 3
     450:	4f 70       	andi	r20, 0x0F	; 15
	// Iterate over all the buttons and see which ones have changed.
	// Any button pushes are added to the queue of button pushes (if
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for (uint8_t pin = 0; pin < NUM_BUTTONS; pin++)
     452:	80 e0       	ldi	r24, 0x00	; 0
     454:	26 c0       	rjmp	.+76     	; 0x4a2 <__vector_5+0x6c>
	{
		if (queue_length < BUTTON_QUEUE_SIZE
     456:	90 91 a0 01 	lds	r25, 0x01A0	; 0x8001a0 <__data_end>
     45a:	94 30       	cpi	r25, 0x04	; 4
     45c:	0c f5       	brge	.+66     	; 0x4a0 <__vector_5+0x6a>
				&& (button_state & (1 << pin))
     45e:	24 2f       	mov	r18, r20
     460:	30 e0       	ldi	r19, 0x00	; 0
     462:	08 2e       	mov	r0, r24
     464:	02 c0       	rjmp	.+4      	; 0x46a <__vector_5+0x34>
     466:	35 95       	asr	r19
     468:	27 95       	ror	r18
     46a:	0a 94       	dec	r0
     46c:	e2 f7       	brpl	.-8      	; 0x466 <__vector_5+0x30>
     46e:	20 ff       	sbrs	r18, 0
     470:	17 c0       	rjmp	.+46     	; 0x4a0 <__vector_5+0x6a>
				&& !(last_button_state & (1 << pin)))
     472:	20 91 a5 01 	lds	r18, 0x01A5	; 0x8001a5 <last_button_state>
     476:	30 e0       	ldi	r19, 0x00	; 0
     478:	08 2e       	mov	r0, r24
     47a:	02 c0       	rjmp	.+4      	; 0x480 <__vector_5+0x4a>
     47c:	35 95       	asr	r19
     47e:	27 95       	ror	r18
     480:	0a 94       	dec	r0
     482:	e2 f7       	brpl	.-8      	; 0x47c <__vector_5+0x46>
     484:	20 fd       	sbrc	r18, 0
     486:	0c c0       	rjmp	.+24     	; 0x4a0 <__vector_5+0x6a>
				{
			// Add the button push to the queue (and update the
			// length of the queue
			button_queue[queue_length++] = pin;
     488:	e0 91 a0 01 	lds	r30, 0x01A0	; 0x8001a0 <__data_end>
     48c:	91 e0       	ldi	r25, 0x01	; 1
     48e:	9e 0f       	add	r25, r30
     490:	90 93 a0 01 	sts	0x01A0, r25	; 0x8001a0 <__data_end>
     494:	0e 2e       	mov	r0, r30
     496:	00 0c       	add	r0, r0
     498:	ff 0b       	sbc	r31, r31
     49a:	ef 55       	subi	r30, 0x5F	; 95
     49c:	fe 4f       	sbci	r31, 0xFE	; 254
     49e:	80 83       	st	Z, r24
	// Iterate over all the buttons and see which ones have changed.
	// Any button pushes are added to the queue of button pushes (if
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for (uint8_t pin = 0; pin < NUM_BUTTONS; pin++)
     4a0:	8f 5f       	subi	r24, 0xFF	; 255
     4a2:	84 30       	cpi	r24, 0x04	; 4
     4a4:	c0 f2       	brcs	.-80     	; 0x456 <__vector_5+0x20>
			button_queue[queue_length++] = pin;
		}
	}
	
	// Remember this button state
	last_button_state = button_state;
     4a6:	40 93 a5 01 	sts	0x01A5, r20	; 0x8001a5 <last_button_state>
}
     4aa:	ff 91       	pop	r31
     4ac:	ef 91       	pop	r30
     4ae:	9f 91       	pop	r25
     4b0:	8f 91       	pop	r24
     4b2:	4f 91       	pop	r20
     4b4:	3f 91       	pop	r19
     4b6:	2f 91       	pop	r18
     4b8:	0f 90       	pop	r0
     4ba:	0f be       	out	0x3f, r0	; 63
     4bc:	0f 90       	pop	r0
     4be:	1f 90       	pop	r1
     4c0:	18 95       	reti

000004c2 <update_start_screen>:

// Update dynamic start screen based on the frame number (0-31)
// Note: this is hardcoded to PONG game.
// Purposefully obfuscated so functionality cannot be copied for movement tasks
void update_start_screen(uint8_t frame_number)
{
     4c2:	1f 93       	push	r17
     4c4:	cf 93       	push	r28
     4c6:	df 93       	push	r29
     4c8:	18 2f       	mov	r17, r24
	PixelColour colour;
	for (uint8_t row = 4; row < 8; row++)
     4ca:	d4 e0       	ldi	r29, 0x04	; 4
     4cc:	36 c0       	rjmp	.+108    	; 0x53a <update_start_screen+0x78>
	{
		for (uint8_t col = 11; col < 16; col++)
		{
			colour = col == 14 ? COLOUR_YELLOW : COLOUR_BLACK;
     4ce:	ce 30       	cpi	r28, 0x0E	; 14
     4d0:	11 f4       	brne	.+4      	; 0x4d6 <update_start_screen+0x14>
     4d2:	4f ef       	ldi	r20, 0xFF	; 255
     4d4:	01 c0       	rjmp	.+2      	; 0x4d8 <update_start_screen+0x16>
     4d6:	40 e0       	ldi	r20, 0x00	; 0
			if (((32+col-frame_number) & ((1<<(row-2))-1)) == (1<<(row-3))-1)
     4d8:	2c 2f       	mov	r18, r28
     4da:	30 e0       	ldi	r19, 0x00	; 0
     4dc:	20 5e       	subi	r18, 0xE0	; 224
     4de:	3f 4f       	sbci	r19, 0xFF	; 255
     4e0:	21 1b       	sub	r18, r17
     4e2:	31 09       	sbc	r19, r1
     4e4:	ed 2f       	mov	r30, r29
     4e6:	f0 e0       	ldi	r31, 0x00	; 0
     4e8:	bf 01       	movw	r22, r30
     4ea:	62 50       	subi	r22, 0x02	; 2
     4ec:	71 09       	sbc	r23, r1
     4ee:	81 e0       	ldi	r24, 0x01	; 1
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	dc 01       	movw	r26, r24
     4f4:	02 c0       	rjmp	.+4      	; 0x4fa <update_start_screen+0x38>
     4f6:	aa 0f       	add	r26, r26
     4f8:	bb 1f       	adc	r27, r27
     4fa:	6a 95       	dec	r22
     4fc:	e2 f7       	brpl	.-8      	; 0x4f6 <update_start_screen+0x34>
     4fe:	bd 01       	movw	r22, r26
     500:	61 50       	subi	r22, 0x01	; 1
     502:	71 09       	sbc	r23, r1
     504:	26 23       	and	r18, r22
     506:	37 23       	and	r19, r23
     508:	33 97       	sbiw	r30, 0x03	; 3
     50a:	02 c0       	rjmp	.+4      	; 0x510 <update_start_screen+0x4e>
     50c:	88 0f       	add	r24, r24
     50e:	99 1f       	adc	r25, r25
     510:	ea 95       	dec	r30
     512:	e2 f7       	brpl	.-8      	; 0x50c <update_start_screen+0x4a>
     514:	01 97       	sbiw	r24, 0x01	; 1
     516:	28 17       	cp	r18, r24
     518:	39 07       	cpc	r19, r25
     51a:	29 f4       	brne	.+10     	; 0x526 <update_start_screen+0x64>
			{
				colour = col < 14 ? COLOUR_RED : COLOUR_GREEN;
     51c:	ce 30       	cpi	r28, 0x0E	; 14
     51e:	10 f4       	brcc	.+4      	; 0x524 <update_start_screen+0x62>
     520:	4f e0       	ldi	r20, 0x0F	; 15
     522:	01 c0       	rjmp	.+2      	; 0x526 <update_start_screen+0x64>
     524:	40 ef       	ldi	r20, 0xF0	; 240
			}
			ledmatrix_update_pixel(col, row, colour);
     526:	6d 2f       	mov	r22, r29
     528:	8c 2f       	mov	r24, r28
     52a:	0e 94 25 04 	call	0x84a	; 0x84a <ledmatrix_update_pixel>
void update_start_screen(uint8_t frame_number)
{
	PixelColour colour;
	for (uint8_t row = 4; row < 8; row++)
	{
		for (uint8_t col = 11; col < 16; col++)
     52e:	cf 5f       	subi	r28, 0xFF	; 255
     530:	01 c0       	rjmp	.+2      	; 0x534 <update_start_screen+0x72>
     532:	cb e0       	ldi	r28, 0x0B	; 11
     534:	c0 31       	cpi	r28, 0x10	; 16
     536:	58 f2       	brcs	.-106    	; 0x4ce <update_start_screen+0xc>
// Note: this is hardcoded to PONG game.
// Purposefully obfuscated so functionality cannot be copied for movement tasks
void update_start_screen(uint8_t frame_number)
{
	PixelColour colour;
	for (uint8_t row = 4; row < 8; row++)
     538:	df 5f       	subi	r29, 0xFF	; 255
     53a:	d8 30       	cpi	r29, 0x08	; 8
     53c:	d0 f3       	brcs	.-12     	; 0x532 <update_start_screen+0x70>
				colour = col < 14 ? COLOUR_RED : COLOUR_GREEN;
			}
			ledmatrix_update_pixel(col, row, colour);
		}
	}
}
     53e:	df 91       	pop	r29
     540:	cf 91       	pop	r28
     542:	1f 91       	pop	r17
     544:	08 95       	ret

00000546 <show_start_screen>:
// Stored as a 5 x 3 grid pattern going from Left-to-Right, Top-to-Bottom
// Padded with a leading zero so that it fits into a 16-bit value


void show_start_screen(void)
{
     546:	1f 93       	push	r17
     548:	cf 93       	push	r28
     54a:	df 93       	push	r29
     54c:	cd b7       	in	r28, 0x3d	; 61
     54e:	de b7       	in	r29, 0x3e	; 62
     550:	28 97       	sbiw	r28, 0x08	; 8
     552:	0f b6       	in	r0, 0x3f	; 63
     554:	f8 94       	cli
     556:	de bf       	out	0x3e, r29	; 62
     558:	0f be       	out	0x3f, r0	; 63
     55a:	cd bf       	out	0x3d, r28	; 61
	MatrixColumn column_colour_data;
	uint8_t col_data;
		
	ledmatrix_clear(); // start by clearing the LED matrix
     55c:	0e 94 61 04 	call	0x8c2	; 0x8c2 <ledmatrix_clear>
	for (uint8_t col = 0; col < MATRIX_NUM_COLUMNS; col++)
     560:	10 e0       	ldi	r17, 0x00	; 0
     562:	31 c0       	rjmp	.+98     	; 0x5c6 <show_start_screen+0x80>
	{
		col_data = pong_display[col];
     564:	e1 2f       	mov	r30, r17
     566:	f0 e0       	ldi	r31, 0x00	; 0
     568:	e2 5f       	subi	r30, 0xF2	; 242
     56a:	fe 4f       	sbci	r31, 0xFE	; 254
     56c:	90 81       	ld	r25, Z
		// go through the top 7 bits (not the bottom one as that was our colour bit)
		// and set any to be the correct colour
		for(uint8_t row = 0; row < MATRIX_NUM_ROWS; row++)
     56e:	80 e0       	ldi	r24, 0x00	; 0
     570:	21 c0       	rjmp	.+66     	; 0x5b4 <show_start_screen+0x6e>
		{
			// If the relevant font bit is set, we make this a coloured pixel, else blank
			if(col_data>>row & 1)
     572:	28 2f       	mov	r18, r24
     574:	30 e0       	ldi	r19, 0x00	; 0
     576:	49 2f       	mov	r20, r25
     578:	50 e0       	ldi	r21, 0x00	; 0
     57a:	08 2e       	mov	r0, r24
     57c:	02 c0       	rjmp	.+4      	; 0x582 <show_start_screen+0x3c>
     57e:	55 95       	asr	r21
     580:	47 95       	ror	r20
     582:	0a 94       	dec	r0
     584:	e2 f7       	brpl	.-8      	; 0x57e <show_start_screen+0x38>
     586:	40 ff       	sbrs	r20, 0
     588:	0d c0       	rjmp	.+26     	; 0x5a4 <show_start_screen+0x5e>
			{
				column_colour_data[row] = (row < 4 ? COLOUR_RED : COLOUR_GREEN);
     58a:	84 30       	cpi	r24, 0x04	; 4
     58c:	10 f4       	brcc	.+4      	; 0x592 <show_start_screen+0x4c>
     58e:	4f e0       	ldi	r20, 0x0F	; 15
     590:	01 c0       	rjmp	.+2      	; 0x594 <show_start_screen+0x4e>
     592:	40 ef       	ldi	r20, 0xF0	; 240
     594:	e1 e0       	ldi	r30, 0x01	; 1
     596:	f0 e0       	ldi	r31, 0x00	; 0
     598:	ec 0f       	add	r30, r28
     59a:	fd 1f       	adc	r31, r29
     59c:	e2 0f       	add	r30, r18
     59e:	f3 1f       	adc	r31, r19
     5a0:	40 83       	st	Z, r20
     5a2:	07 c0       	rjmp	.+14     	; 0x5b2 <show_start_screen+0x6c>
			}
			else
			{
				column_colour_data[row] = 0;
     5a4:	e1 e0       	ldi	r30, 0x01	; 1
     5a6:	f0 e0       	ldi	r31, 0x00	; 0
     5a8:	ec 0f       	add	r30, r28
     5aa:	fd 1f       	adc	r31, r29
     5ac:	e2 0f       	add	r30, r18
     5ae:	f3 1f       	adc	r31, r19
     5b0:	10 82       	st	Z, r1
	for (uint8_t col = 0; col < MATRIX_NUM_COLUMNS; col++)
	{
		col_data = pong_display[col];
		// go through the top 7 bits (not the bottom one as that was our colour bit)
		// and set any to be the correct colour
		for(uint8_t row = 0; row < MATRIX_NUM_ROWS; row++)
     5b2:	8f 5f       	subi	r24, 0xFF	; 255
     5b4:	88 30       	cpi	r24, 0x08	; 8
     5b6:	e8 f2       	brcs	.-70     	; 0x572 <show_start_screen+0x2c>
			else
			{
				column_colour_data[row] = 0;
			}
		}
		ledmatrix_update_column(col, column_colour_data);
     5b8:	be 01       	movw	r22, r28
     5ba:	6f 5f       	subi	r22, 0xFF	; 255
     5bc:	7f 4f       	sbci	r23, 0xFF	; 255
     5be:	81 2f       	mov	r24, r17
     5c0:	0e 94 44 04 	call	0x888	; 0x888 <ledmatrix_update_column>
{
	MatrixColumn column_colour_data;
	uint8_t col_data;
		
	ledmatrix_clear(); // start by clearing the LED matrix
	for (uint8_t col = 0; col < MATRIX_NUM_COLUMNS; col++)
     5c4:	1f 5f       	subi	r17, 0xFF	; 255
     5c6:	10 31       	cpi	r17, 0x10	; 16
     5c8:	68 f2       	brcs	.-102    	; 0x564 <show_start_screen+0x1e>
				column_colour_data[row] = 0;
			}
		}
		ledmatrix_update_column(col, column_colour_data);
	}
	update_start_screen(0);
     5ca:	80 e0       	ldi	r24, 0x00	; 0
     5cc:	0e 94 61 02 	call	0x4c2	; 0x4c2 <update_start_screen>
}
     5d0:	28 96       	adiw	r28, 0x08	; 8
     5d2:	0f b6       	in	r0, 0x3f	; 63
     5d4:	f8 94       	cli
     5d6:	de bf       	out	0x3e, r29	; 62
     5d8:	0f be       	out	0x3f, r0	; 63
     5da:	cd bf       	out	0x3d, r28	; 61
     5dc:	df 91       	pop	r29
     5de:	cf 91       	pop	r28
     5e0:	1f 91       	pop	r17
     5e2:	08 95       	ret

000005e4 <default_grid>:
}

// Initialise the display for the board, this creates the display
// for an empty board.
void default_grid(void)
{
     5e4:	cf 93       	push	r28
     5e6:	df 93       	push	r29
     5e8:	cd b7       	in	r28, 0x3d	; 61
     5ea:	de b7       	in	r29, 0x3e	; 62
     5ec:	28 97       	sbiw	r28, 0x08	; 8
     5ee:	0f b6       	in	r0, 0x3f	; 63
     5f0:	f8 94       	cli
     5f2:	de bf       	out	0x3e, r29	; 62
     5f4:	0f be       	out	0x3f, r0	; 63
     5f6:	cd bf       	out	0x3d, r28	; 61
	ledmatrix_clear();
     5f8:	0e 94 61 04 	call	0x8c2	; 0x8c2 <ledmatrix_clear>
	MatrixColumn colours;
	
	for (uint8_t row=0; row<MATRIX_NUM_ROWS; row++)
     5fc:	80 e0       	ldi	r24, 0x00	; 0
     5fe:	09 c0       	rjmp	.+18     	; 0x612 <default_grid+0x2e>
	{
		colours[row] = COLOUR_YELLOW;
     600:	e1 e0       	ldi	r30, 0x01	; 1
     602:	f0 e0       	ldi	r31, 0x00	; 0
     604:	ec 0f       	add	r30, r28
     606:	fd 1f       	adc	r31, r29
     608:	e8 0f       	add	r30, r24
     60a:	f1 1d       	adc	r31, r1
     60c:	9f ef       	ldi	r25, 0xFF	; 255
     60e:	90 83       	st	Z, r25
void default_grid(void)
{
	ledmatrix_clear();
	MatrixColumn colours;
	
	for (uint8_t row=0; row<MATRIX_NUM_ROWS; row++)
     610:	8f 5f       	subi	r24, 0xFF	; 255
     612:	88 30       	cpi	r24, 0x08	; 8
     614:	a8 f3       	brcs	.-22     	; 0x600 <default_grid+0x1c>
	{
		colours[row] = COLOUR_YELLOW;
	}
	ledmatrix_update_column(13, colours);
     616:	be 01       	movw	r22, r28
     618:	6f 5f       	subi	r22, 0xFF	; 255
     61a:	7f 4f       	sbci	r23, 0xFF	; 255
     61c:	8d e0       	ldi	r24, 0x0D	; 13
     61e:	0e 94 44 04 	call	0x888	; 0x888 <ledmatrix_update_column>
	
	for (uint8_t row=0; row<MATRIX_NUM_ROWS; row++)
     622:	80 e0       	ldi	r24, 0x00	; 0
     624:	09 c0       	rjmp	.+18     	; 0x638 <default_grid+0x54>
	{
		colours[row] = COLOUR_HALF_YELLOW;
     626:	e1 e0       	ldi	r30, 0x01	; 1
     628:	f0 e0       	ldi	r31, 0x00	; 0
     62a:	ec 0f       	add	r30, r28
     62c:	fd 1f       	adc	r31, r29
     62e:	e8 0f       	add	r30, r24
     630:	f1 1d       	adc	r31, r1
     632:	95 e5       	ldi	r25, 0x55	; 85
     634:	90 83       	st	Z, r25
	{
		colours[row] = COLOUR_YELLOW;
	}
	ledmatrix_update_column(13, colours);
	
	for (uint8_t row=0; row<MATRIX_NUM_ROWS; row++)
     636:	8f 5f       	subi	r24, 0xFF	; 255
     638:	88 30       	cpi	r24, 0x08	; 8
     63a:	a8 f3       	brcs	.-22     	; 0x626 <default_grid+0x42>
	{
		colours[row] = COLOUR_HALF_YELLOW;
	}
	ledmatrix_update_column(12, colours);
     63c:	be 01       	movw	r22, r28
     63e:	6f 5f       	subi	r22, 0xFF	; 255
     640:	7f 4f       	sbci	r23, 0xFF	; 255
     642:	8c e0       	ldi	r24, 0x0C	; 12
     644:	0e 94 44 04 	call	0x888	; 0x888 <ledmatrix_update_column>
	ledmatrix_update_column(14, colours);
     648:	be 01       	movw	r22, r28
     64a:	6f 5f       	subi	r22, 0xFF	; 255
     64c:	7f 4f       	sbci	r23, 0xFF	; 255
     64e:	8e e0       	ldi	r24, 0x0E	; 14
     650:	0e 94 44 04 	call	0x888	; 0x888 <ledmatrix_update_column>
	
	for (uint8_t row=0; row<MATRIX_NUM_ROWS; row++)
     654:	80 e0       	ldi	r24, 0x00	; 0
     656:	09 c0       	rjmp	.+18     	; 0x66a <default_grid+0x86>
	{
		colours[row] = COLOUR_QUART_YELLOW;
     658:	e1 e0       	ldi	r30, 0x01	; 1
     65a:	f0 e0       	ldi	r31, 0x00	; 0
     65c:	ec 0f       	add	r30, r28
     65e:	fd 1f       	adc	r31, r29
     660:	e8 0f       	add	r30, r24
     662:	f1 1d       	adc	r31, r1
     664:	91 e1       	ldi	r25, 0x11	; 17
     666:	90 83       	st	Z, r25
		colours[row] = COLOUR_HALF_YELLOW;
	}
	ledmatrix_update_column(12, colours);
	ledmatrix_update_column(14, colours);
	
	for (uint8_t row=0; row<MATRIX_NUM_ROWS; row++)
     668:	8f 5f       	subi	r24, 0xFF	; 255
     66a:	88 30       	cpi	r24, 0x08	; 8
     66c:	a8 f3       	brcs	.-22     	; 0x658 <default_grid+0x74>
	{
		colours[row] = COLOUR_QUART_YELLOW;
	}
	ledmatrix_update_column(11, colours);
     66e:	be 01       	movw	r22, r28
     670:	6f 5f       	subi	r22, 0xFF	; 255
     672:	7f 4f       	sbci	r23, 0xFF	; 255
     674:	8b e0       	ldi	r24, 0x0B	; 11
     676:	0e 94 44 04 	call	0x888	; 0x888 <ledmatrix_update_column>
	ledmatrix_update_column(15, colours);
     67a:	be 01       	movw	r22, r28
     67c:	6f 5f       	subi	r22, 0xFF	; 255
     67e:	7f 4f       	sbci	r23, 0xFF	; 255
     680:	8f e0       	ldi	r24, 0x0F	; 15
     682:	0e 94 44 04 	call	0x888	; 0x888 <ledmatrix_update_column>
}
     686:	28 96       	adiw	r28, 0x08	; 8
     688:	0f b6       	in	r0, 0x3f	; 63
     68a:	f8 94       	cli
     68c:	de bf       	out	0x3e, r29	; 62
     68e:	0f be       	out	0x3f, r0	; 63
     690:	cd bf       	out	0x3d, r28	; 61
     692:	df 91       	pop	r29
     694:	cf 91       	pop	r28
     696:	08 95       	ret

00000698 <initialise_game>:

// Initialise the game by resetting the grid and beat
void initialise_game(void)
{
	// initialise the display we are using.
	default_grid();
     698:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <default_grid>
	beat = 0;
     69c:	10 92 ac 01 	sts	0x01AC, r1	; 0x8001ac <beat+0x1>
     6a0:	10 92 ab 01 	sts	0x01AB, r1	; 0x8001ab <beat>
     6a4:	08 95       	ret

000006a6 <play_note>:
}

// Play a note in the given lane
void play_note(uint8_t lane)
{
     6a6:	08 95       	ret

000006a8 <advance_note>:
	//    advance_note when a note disappears from the screen
}

// Advance the notes one row down the display
void advance_note(void)
{
     6a8:	ef 92       	push	r14
     6aa:	ff 92       	push	r15
     6ac:	0f 93       	push	r16
     6ae:	1f 93       	push	r17
     6b0:	cf 93       	push	r28
     6b2:	df 93       	push	r29
	// remove all the current notes; reverse of below
	for (uint8_t col=0; col<MATRIX_NUM_COLUMNS; col++)
     6b4:	c0 e0       	ldi	r28, 0x00	; 0
     6b6:	65 c0       	rjmp	.+202    	; 0x782 <advance_note+0xda>
	{
		uint8_t future = MATRIX_NUM_COLUMNS - 1 - col;
     6b8:	8f e0       	ldi	r24, 0x0F	; 15
     6ba:	8c 1b       	sub	r24, r28
		uint8_t index = (future + beat) / 5;
     6bc:	40 91 ab 01 	lds	r20, 0x01AB	; 0x8001ab <beat>
     6c0:	50 91 ac 01 	lds	r21, 0x01AC	; 0x8001ac <beat+0x1>
     6c4:	48 0f       	add	r20, r24
     6c6:	51 1d       	adc	r21, r1
     6c8:	9a 01       	movw	r18, r20
     6ca:	ad ec       	ldi	r26, 0xCD	; 205
     6cc:	bc ec       	ldi	r27, 0xCC	; 204
     6ce:	0e 94 0d 08 	call	0x101a	; 0x101a <__umulhisi3>
     6d2:	8c 01       	movw	r16, r24
     6d4:	16 95       	lsr	r17
     6d6:	07 95       	ror	r16
     6d8:	16 95       	lsr	r17
     6da:	07 95       	ror	r16
		if (index >= TRACK_LENGTH)
     6dc:	01 38       	cpi	r16, 0x81	; 129
     6de:	08 f0       	brcs	.+2      	; 0x6e2 <advance_note+0x3a>
     6e0:	53 c0       	rjmp	.+166    	; 0x788 <advance_note+0xe0>
		{
			break;
		}
		if ((future+beat) % 5)
     6e2:	c8 01       	movw	r24, r16
     6e4:	98 01       	movw	r18, r16
     6e6:	22 0f       	add	r18, r18
     6e8:	33 1f       	adc	r19, r19
     6ea:	22 0f       	add	r18, r18
     6ec:	33 1f       	adc	r19, r19
     6ee:	82 0f       	add	r24, r18
     6f0:	93 1f       	adc	r25, r19
     6f2:	48 17       	cp	r20, r24
     6f4:	59 07       	cpc	r21, r25
     6f6:	09 f0       	breq	.+2      	; 0x6fa <advance_note+0x52>
     6f8:	43 c0       	rjmp	.+134    	; 0x780 <advance_note+0xd8>
     6fa:	d0 e0       	ldi	r29, 0x00	; 0
     6fc:	3e c0       	rjmp	.+124    	; 0x77a <advance_note+0xd2>
		{
			continue;
		}
		for (uint8_t lane = 0; lane < 4; lane++)
		{
			if (track[index] & (1<<lane))
     6fe:	f8 01       	movw	r30, r16
     700:	ff 27       	eor	r31, r31
     702:	e2 5e       	subi	r30, 0xE2	; 226
     704:	fe 4f       	sbci	r31, 0xFE	; 254
     706:	80 81       	ld	r24, Z
     708:	90 e0       	ldi	r25, 0x00	; 0
     70a:	0d 2e       	mov	r0, r29
     70c:	02 c0       	rjmp	.+4      	; 0x712 <advance_note+0x6a>
     70e:	95 95       	asr	r25
     710:	87 95       	ror	r24
     712:	0a 94       	dec	r0
     714:	e2 f7       	brpl	.-8      	; 0x70e <advance_note+0x66>
     716:	80 ff       	sbrs	r24, 0
     718:	2f c0       	rjmp	.+94     	; 0x778 <advance_note+0xd0>
			{
				PixelColour colour;
				// yellows in the scoring area
				if (col==11 || col == 15)
     71a:	cb 30       	cpi	r28, 0x0B	; 11
     71c:	59 f0       	breq	.+22     	; 0x734 <advance_note+0x8c>
     71e:	cf 30       	cpi	r28, 0x0F	; 15
     720:	71 f0       	breq	.+28     	; 0x73e <advance_note+0x96>
				{
					colour = COLOUR_QUART_YELLOW;
				}
				else if (col==12 || col == 14)
     722:	cc 30       	cpi	r28, 0x0C	; 12
     724:	89 f0       	breq	.+34     	; 0x748 <advance_note+0xa0>
     726:	ce 30       	cpi	r28, 0x0E	; 14
     728:	a1 f0       	breq	.+40     	; 0x752 <advance_note+0xaa>
				{
					colour = COLOUR_HALF_YELLOW;
				}
				else if (col==13)
     72a:	cd 30       	cpi	r28, 0x0D	; 13
     72c:	b9 f4       	brne	.+46     	; 0x75c <advance_note+0xb4>
				{
					colour = COLOUR_YELLOW;
     72e:	ee 24       	eor	r14, r14
     730:	ea 94       	dec	r14
     732:	15 c0       	rjmp	.+42     	; 0x75e <advance_note+0xb6>
			{
				PixelColour colour;
				// yellows in the scoring area
				if (col==11 || col == 15)
				{
					colour = COLOUR_QUART_YELLOW;
     734:	0f 2e       	mov	r0, r31
     736:	f1 e1       	ldi	r31, 0x11	; 17
     738:	ef 2e       	mov	r14, r31
     73a:	f0 2d       	mov	r31, r0
     73c:	10 c0       	rjmp	.+32     	; 0x75e <advance_note+0xb6>
     73e:	0f 2e       	mov	r0, r31
     740:	f1 e1       	ldi	r31, 0x11	; 17
     742:	ef 2e       	mov	r14, r31
     744:	f0 2d       	mov	r31, r0
     746:	0b c0       	rjmp	.+22     	; 0x75e <advance_note+0xb6>
				}
				else if (col==12 || col == 14)
				{
					colour = COLOUR_HALF_YELLOW;
     748:	0f 2e       	mov	r0, r31
     74a:	f5 e5       	ldi	r31, 0x55	; 85
     74c:	ef 2e       	mov	r14, r31
     74e:	f0 2d       	mov	r31, r0
     750:	06 c0       	rjmp	.+12     	; 0x75e <advance_note+0xb6>
     752:	0f 2e       	mov	r0, r31
     754:	f5 e5       	ldi	r31, 0x55	; 85
     756:	ef 2e       	mov	r14, r31
     758:	f0 2d       	mov	r31, r0
     75a:	01 c0       	rjmp	.+2      	; 0x75e <advance_note+0xb6>
				{
					colour = COLOUR_YELLOW;
				}
				else
				{
					colour = COLOUR_BLACK;
     75c:	e1 2c       	mov	r14, r1
				}
				ledmatrix_update_pixel(col, 2*lane, colour);
     75e:	4e 2d       	mov	r20, r14
     760:	fd 2e       	mov	r15, r29
     762:	ff 0c       	add	r15, r15
     764:	6f 2d       	mov	r22, r15
     766:	8c 2f       	mov	r24, r28
     768:	0e 94 25 04 	call	0x84a	; 0x84a <ledmatrix_update_pixel>
				ledmatrix_update_pixel(col, 2*lane+1, colour);
     76c:	61 e0       	ldi	r22, 0x01	; 1
     76e:	6f 0d       	add	r22, r15
     770:	4e 2d       	mov	r20, r14
     772:	8c 2f       	mov	r24, r28
     774:	0e 94 25 04 	call	0x84a	; 0x84a <ledmatrix_update_pixel>
		}
		if ((future+beat) % 5)
		{
			continue;
		}
		for (uint8_t lane = 0; lane < 4; lane++)
     778:	df 5f       	subi	r29, 0xFF	; 255
     77a:	d4 30       	cpi	r29, 0x04	; 4
     77c:	08 f4       	brcc	.+2      	; 0x780 <advance_note+0xd8>
     77e:	bf cf       	rjmp	.-130    	; 0x6fe <advance_note+0x56>

// Advance the notes one row down the display
void advance_note(void)
{
	// remove all the current notes; reverse of below
	for (uint8_t col=0; col<MATRIX_NUM_COLUMNS; col++)
     780:	cf 5f       	subi	r28, 0xFF	; 255
     782:	c0 31       	cpi	r28, 0x10	; 16
     784:	08 f4       	brcc	.+2      	; 0x788 <advance_note+0xe0>
     786:	98 cf       	rjmp	.-208    	; 0x6b8 <advance_note+0x10>
			}
		}
	}
	
	// increment the beat
	beat++;
     788:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <beat>
     78c:	90 91 ac 01 	lds	r25, 0x01AC	; 0x8001ac <beat+0x1>
     790:	01 96       	adiw	r24, 0x01	; 1
     792:	90 93 ac 01 	sts	0x01AC, r25	; 0x8001ac <beat+0x1>
     796:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <beat>
	
	// draw the new notes
	for (uint8_t col=0; col<MATRIX_NUM_COLUMNS; col++)
     79a:	d0 e0       	ldi	r29, 0x00	; 0
     79c:	46 c0       	rjmp	.+140    	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
	{
		// col counts from one end, future from the other
		uint8_t future = MATRIX_NUM_COLUMNS-1-col;
     79e:	8f e0       	ldi	r24, 0x0F	; 15
     7a0:	8d 1b       	sub	r24, r29
		// notes are only drawn every five columns
		if ((future+beat)%5)
     7a2:	40 91 ab 01 	lds	r20, 0x01AB	; 0x8001ab <beat>
     7a6:	50 91 ac 01 	lds	r21, 0x01AC	; 0x8001ac <beat+0x1>
     7aa:	48 0f       	add	r20, r24
     7ac:	51 1d       	adc	r21, r1
     7ae:	9a 01       	movw	r18, r20
     7b0:	ad ec       	ldi	r26, 0xCD	; 205
     7b2:	bc ec       	ldi	r27, 0xCC	; 204
     7b4:	0e 94 0d 08 	call	0x101a	; 0x101a <__umulhisi3>
     7b8:	96 95       	lsr	r25
     7ba:	87 95       	ror	r24
     7bc:	96 95       	lsr	r25
     7be:	87 95       	ror	r24
     7c0:	9c 01       	movw	r18, r24
     7c2:	22 0f       	add	r18, r18
     7c4:	33 1f       	adc	r19, r19
     7c6:	22 0f       	add	r18, r18
     7c8:	33 1f       	adc	r19, r19
     7ca:	82 0f       	add	r24, r18
     7cc:	93 1f       	adc	r25, r19
     7ce:	48 17       	cp	r20, r24
     7d0:	59 07       	cpc	r21, r25
     7d2:	51 f5       	brne	.+84     	; 0x828 <__DATA_REGION_LENGTH__+0x28>
		{
			continue;
		}
		
		// index of which note in the track to play
		uint8_t index = (future+beat)/5;
     7d4:	9a 01       	movw	r18, r20
     7d6:	0e 94 0d 08 	call	0x101a	; 0x101a <__umulhisi3>
     7da:	8c 01       	movw	r16, r24
     7dc:	16 95       	lsr	r17
     7de:	07 95       	ror	r16
     7e0:	16 95       	lsr	r17
     7e2:	07 95       	ror	r16
		// if the index is beyond the end of the track,
		// no note can be drawn
		if (index >= TRACK_LENGTH)
     7e4:	01 38       	cpi	r16, 0x81	; 129
     7e6:	00 f5       	brcc	.+64     	; 0x828 <__DATA_REGION_LENGTH__+0x28>
     7e8:	c0 e0       	ldi	r28, 0x00	; 0
     7ea:	1c c0       	rjmp	.+56     	; 0x824 <__DATA_REGION_LENGTH__+0x24>
		}
		// iterate over the four paths
		for (uint8_t lane=0; lane<4; lane++)
		{
			// check if there's a note in the specific path
			if (track[index] & (1<<lane))
     7ec:	f8 01       	movw	r30, r16
     7ee:	ff 27       	eor	r31, r31
     7f0:	e2 5e       	subi	r30, 0xE2	; 226
     7f2:	fe 4f       	sbci	r31, 0xFE	; 254
     7f4:	80 81       	ld	r24, Z
     7f6:	90 e0       	ldi	r25, 0x00	; 0
     7f8:	0c 2e       	mov	r0, r28
     7fa:	02 c0       	rjmp	.+4      	; 0x800 <__DATA_REGION_LENGTH__>
     7fc:	95 95       	asr	r25
     7fe:	87 95       	ror	r24
     800:	0a 94       	dec	r0
     802:	e2 f7       	brpl	.-8      	; 0x7fc <advance_note+0x154>
     804:	80 ff       	sbrs	r24, 0
     806:	0d c0       	rjmp	.+26     	; 0x822 <__DATA_REGION_LENGTH__+0x22>
			{
				// if so, colour the two pixels red
				ledmatrix_update_pixel(col, 2*lane, COLOUR_RED);
     808:	4f e0       	ldi	r20, 0x0F	; 15
     80a:	fc 2e       	mov	r15, r28
     80c:	ff 0c       	add	r15, r15
     80e:	6f 2d       	mov	r22, r15
     810:	8d 2f       	mov	r24, r29
     812:	0e 94 25 04 	call	0x84a	; 0x84a <ledmatrix_update_pixel>
				ledmatrix_update_pixel(col, 2*lane+1, COLOUR_RED);
     816:	61 e0       	ldi	r22, 0x01	; 1
     818:	6f 0d       	add	r22, r15
     81a:	4f e0       	ldi	r20, 0x0F	; 15
     81c:	8d 2f       	mov	r24, r29
     81e:	0e 94 25 04 	call	0x84a	; 0x84a <ledmatrix_update_pixel>
		if (index >= TRACK_LENGTH)
		{
			continue;
		}
		// iterate over the four paths
		for (uint8_t lane=0; lane<4; lane++)
     822:	cf 5f       	subi	r28, 0xFF	; 255
     824:	c4 30       	cpi	r28, 0x04	; 4
     826:	10 f3       	brcs	.-60     	; 0x7ec <advance_note+0x144>
	
	// increment the beat
	beat++;
	
	// draw the new notes
	for (uint8_t col=0; col<MATRIX_NUM_COLUMNS; col++)
     828:	df 5f       	subi	r29, 0xFF	; 255
     82a:	d0 31       	cpi	r29, 0x10	; 16
     82c:	08 f4       	brcc	.+2      	; 0x830 <__DATA_REGION_LENGTH__+0x30>
     82e:	b7 cf       	rjmp	.-146    	; 0x79e <advance_note+0xf6>
				ledmatrix_update_pixel(col, 2*lane, COLOUR_RED);
				ledmatrix_update_pixel(col, 2*lane+1, COLOUR_RED);
			}
		}
	}
}
     830:	df 91       	pop	r29
     832:	cf 91       	pop	r28
     834:	1f 91       	pop	r17
     836:	0f 91       	pop	r16
     838:	ff 90       	pop	r15
     83a:	ef 90       	pop	r14
     83c:	08 95       	ret

0000083e <is_game_over>:
uint8_t is_game_over(void)
{
	// YOUR CODE HERE
	// Detect if the game is over i.e. if a player has won.
	return 0;
}
     83e:	80 e0       	ldi	r24, 0x00	; 0
     840:	08 95       	ret

00000842 <ledmatrix_setup>:
}

void ledmatrix_shift_display_down(void)
{
	(void)spi_send_byte(CMD_SHIFT_DISPLAY);
	(void)spi_send_byte(0x04);
     842:	80 e8       	ldi	r24, 0x80	; 128
     844:	0e 94 30 07 	call	0xe60	; 0xe60 <spi_setup_master>
     848:	08 95       	ret

0000084a <ledmatrix_update_pixel>:
     84a:	1f 93       	push	r17
     84c:	cf 93       	push	r28
     84e:	df 93       	push	r29
     850:	80 31       	cpi	r24, 0x10	; 16
     852:	b0 f4       	brcc	.+44     	; 0x880 <ledmatrix_update_pixel+0x36>
     854:	68 30       	cpi	r22, 0x08	; 8
     856:	a0 f4       	brcc	.+40     	; 0x880 <ledmatrix_update_pixel+0x36>
     858:	14 2f       	mov	r17, r20
     85a:	c6 2f       	mov	r28, r22
     85c:	d8 2f       	mov	r29, r24
     85e:	81 e0       	ldi	r24, 0x01	; 1
     860:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <spi_send_byte>
     864:	6c 2f       	mov	r22, r28
     866:	67 70       	andi	r22, 0x07	; 7
     868:	80 e1       	ldi	r24, 0x10	; 16
     86a:	68 9f       	mul	r22, r24
     86c:	90 01       	movw	r18, r0
     86e:	11 24       	eor	r1, r1
     870:	8d 2f       	mov	r24, r29
     872:	8f 70       	andi	r24, 0x0F	; 15
     874:	82 2b       	or	r24, r18
     876:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <spi_send_byte>
     87a:	81 2f       	mov	r24, r17
     87c:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <spi_send_byte>
     880:	df 91       	pop	r29
     882:	cf 91       	pop	r28
     884:	1f 91       	pop	r17
     886:	08 95       	ret

00000888 <ledmatrix_update_column>:
     888:	0f 93       	push	r16
     88a:	1f 93       	push	r17
     88c:	cf 93       	push	r28
     88e:	80 31       	cpi	r24, 0x10	; 16
     890:	a0 f4       	brcc	.+40     	; 0x8ba <ledmatrix_update_column+0x32>
     892:	8b 01       	movw	r16, r22
     894:	c8 2f       	mov	r28, r24
     896:	83 e0       	ldi	r24, 0x03	; 3
     898:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <spi_send_byte>
     89c:	8c 2f       	mov	r24, r28
     89e:	8f 70       	andi	r24, 0x0F	; 15
     8a0:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <spi_send_byte>
     8a4:	c0 e0       	ldi	r28, 0x00	; 0
     8a6:	07 c0       	rjmp	.+14     	; 0x8b6 <ledmatrix_update_column+0x2e>
     8a8:	f8 01       	movw	r30, r16
     8aa:	ec 0f       	add	r30, r28
     8ac:	f1 1d       	adc	r31, r1
     8ae:	80 81       	ld	r24, Z
     8b0:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <spi_send_byte>
     8b4:	cf 5f       	subi	r28, 0xFF	; 255
     8b6:	c8 30       	cpi	r28, 0x08	; 8
     8b8:	b8 f3       	brcs	.-18     	; 0x8a8 <ledmatrix_update_column+0x20>
     8ba:	cf 91       	pop	r28
     8bc:	1f 91       	pop	r17
     8be:	0f 91       	pop	r16
     8c0:	08 95       	ret

000008c2 <ledmatrix_clear>:
}

void ledmatrix_clear(void)
{
	(void)spi_send_byte(CMD_CLEAR_SCREEN);
     8c2:	8f e0       	ldi	r24, 0x0F	; 15
     8c4:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <spi_send_byte>
     8c8:	08 95       	ret

000008ca <initialise_hardware>:
	}
}

void initialise_hardware(void)
{
	ledmatrix_setup();
     8ca:	0e 94 21 04 	call	0x842	; 0x842 <ledmatrix_setup>
	init_button_interrupts();
     8ce:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <init_button_interrupts>
	// Setup serial port for 19200 baud communication with no echo
	// of incoming characters
	init_serial_stdio(19200, 0);
     8d2:	40 e0       	ldi	r20, 0x00	; 0
     8d4:	60 e0       	ldi	r22, 0x00	; 0
     8d6:	7b e4       	ldi	r23, 0x4B	; 75
     8d8:	80 e0       	ldi	r24, 0x00	; 0
     8da:	90 e0       	ldi	r25, 0x00	; 0
     8dc:	0e 94 48 06 	call	0xc90	; 0xc90 <init_serial_stdio>
	
	init_timer0();
     8e0:	0e 94 9b 07 	call	0xf36	; 0xf36 <init_timer0>
	init_timer1();
     8e4:	0e 94 e6 07 	call	0xfcc	; 0xfcc <init_timer1>
	init_timer2();
     8e8:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <init_timer2>
	
	// Turn on global interrupts
	sei();
     8ec:	78 94       	sei
     8ee:	08 95       	ret

000008f0 <start_screen>:
}

void start_screen(void)
{
     8f0:	4f 92       	push	r4
     8f2:	5f 92       	push	r5
     8f4:	6f 92       	push	r6
     8f6:	7f 92       	push	r7
     8f8:	8f 92       	push	r8
     8fa:	9f 92       	push	r9
     8fc:	af 92       	push	r10
     8fe:	bf 92       	push	r11
     900:	cf 92       	push	r12
     902:	df 92       	push	r13
     904:	ef 92       	push	r14
     906:	ff 92       	push	r15
     908:	cf 93       	push	r28
     90a:	df 93       	push	r29
	// Clear terminal screen and output a message
	clear_terminal();
     90c:	0e 94 73 07 	call	0xee6	; 0xee6 <clear_terminal>
	show_cursor();
     910:	0e 94 92 07 	call	0xf24	; 0xf24 <show_cursor>
	clear_terminal();
     914:	0e 94 73 07 	call	0xee6	; 0xee6 <clear_terminal>
	hide_cursor();
     918:	0e 94 89 07 	call	0xf12	; 0xf12 <hide_cursor>
	set_display_attribute(FG_WHITE);
     91c:	85 e2       	ldi	r24, 0x25	; 37
     91e:	0e 94 7c 07 	call	0xef8	; 0xef8 <set_display_attribute>
	move_terminal_cursor(10,4);
     922:	64 e0       	ldi	r22, 0x04	; 4
     924:	70 e0       	ldi	r23, 0x00	; 0
     926:	8a e0       	ldi	r24, 0x0A	; 10
     928:	90 e0       	ldi	r25, 0x00	; 0
     92a:	0e 94 62 07 	call	0xec4	; 0xec4 <move_terminal_cursor>
	printf_P(PSTR("  ______   __     __  _______         __    __"));
     92e:	86 e3       	ldi	r24, 0x36	; 54
     930:	93 e0       	ldi	r25, 0x03	; 3
     932:	9f 93       	push	r25
     934:	8f 93       	push	r24
     936:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <printf_P>
	move_terminal_cursor(10,5);
     93a:	65 e0       	ldi	r22, 0x05	; 5
     93c:	70 e0       	ldi	r23, 0x00	; 0
     93e:	8a e0       	ldi	r24, 0x0A	; 10
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	0e 94 62 07 	call	0xec4	; 0xec4 <move_terminal_cursor>
	printf_P(PSTR(" /      \\ |  \\   |  \\|       \\       |  \\  |  \\"));
     946:	86 e0       	ldi	r24, 0x06	; 6
     948:	93 e0       	ldi	r25, 0x03	; 3
     94a:	9f 93       	push	r25
     94c:	8f 93       	push	r24
     94e:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <printf_P>
	move_terminal_cursor(10,6);
     952:	66 e0       	ldi	r22, 0x06	; 6
     954:	70 e0       	ldi	r23, 0x00	; 0
     956:	8a e0       	ldi	r24, 0x0A	; 10
     958:	90 e0       	ldi	r25, 0x00	; 0
     95a:	0e 94 62 07 	call	0xec4	; 0xec4 <move_terminal_cursor>
	printf_P(PSTR("|  $$$$$$\\| $$   | $$| $$$$$$$\\      | $$  | $$  ______    ______    ______"));
     95e:	8a eb       	ldi	r24, 0xBA	; 186
     960:	92 e0       	ldi	r25, 0x02	; 2
     962:	9f 93       	push	r25
     964:	8f 93       	push	r24
     966:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <printf_P>
	move_terminal_cursor(10,7);
     96a:	67 e0       	ldi	r22, 0x07	; 7
     96c:	70 e0       	ldi	r23, 0x00	; 0
     96e:	8a e0       	ldi	r24, 0x0A	; 10
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	0e 94 62 07 	call	0xec4	; 0xec4 <move_terminal_cursor>
	printf_P(PSTR("| $$__| $$| $$   | $$| $$__| $$      | $$__| $$ /      \\  /      \\  /      \\"));
     976:	8d e6       	ldi	r24, 0x6D	; 109
     978:	92 e0       	ldi	r25, 0x02	; 2
     97a:	9f 93       	push	r25
     97c:	8f 93       	push	r24
     97e:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <printf_P>
	move_terminal_cursor(10,8);
     982:	68 e0       	ldi	r22, 0x08	; 8
     984:	70 e0       	ldi	r23, 0x00	; 0
     986:	8a e0       	ldi	r24, 0x0A	; 10
     988:	90 e0       	ldi	r25, 0x00	; 0
     98a:	0e 94 62 07 	call	0xec4	; 0xec4 <move_terminal_cursor>
	printf_P(PSTR("| $$    $$ \\$$\\ /  $$| $$    $$      | $$    $$|  $$$$$$\\|  $$$$$$\\|  $$$$$$\\"));
     98e:	8f e1       	ldi	r24, 0x1F	; 31
     990:	92 e0       	ldi	r25, 0x02	; 2
     992:	9f 93       	push	r25
     994:	8f 93       	push	r24
     996:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <printf_P>
	move_terminal_cursor(10,9);
     99a:	69 e0       	ldi	r22, 0x09	; 9
     99c:	70 e0       	ldi	r23, 0x00	; 0
     99e:	8a e0       	ldi	r24, 0x0A	; 10
     9a0:	90 e0       	ldi	r25, 0x00	; 0
     9a2:	0e 94 62 07 	call	0xec4	; 0xec4 <move_terminal_cursor>
	printf_P(PSTR("| $$$$$$$$  \\$$\\  $$ | $$$$$$$\\      | $$$$$$$$| $$    $$| $$   \\$$| $$  | $$"));
     9a6:	81 ed       	ldi	r24, 0xD1	; 209
     9a8:	91 e0       	ldi	r25, 0x01	; 1
     9aa:	9f 93       	push	r25
     9ac:	8f 93       	push	r24
     9ae:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <printf_P>
	move_terminal_cursor(10,10);
     9b2:	6a e0       	ldi	r22, 0x0A	; 10
     9b4:	70 e0       	ldi	r23, 0x00	; 0
     9b6:	8a e0       	ldi	r24, 0x0A	; 10
     9b8:	90 e0       	ldi	r25, 0x00	; 0
     9ba:	0e 94 62 07 	call	0xec4	; 0xec4 <move_terminal_cursor>
	printf_P(PSTR("| $$  | $$   \\$$ $$  | $$  | $$      | $$  | $$| $$$$$$$$| $$      | $$__/ $$"));
     9be:	83 e8       	ldi	r24, 0x83	; 131
     9c0:	91 e0       	ldi	r25, 0x01	; 1
     9c2:	9f 93       	push	r25
     9c4:	8f 93       	push	r24
     9c6:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <printf_P>
	move_terminal_cursor(10,11);
     9ca:	6b e0       	ldi	r22, 0x0B	; 11
     9cc:	70 e0       	ldi	r23, 0x00	; 0
     9ce:	8a e0       	ldi	r24, 0x0A	; 10
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	0e 94 62 07 	call	0xec4	; 0xec4 <move_terminal_cursor>
	printf_P(PSTR("| $$  | $$    \\$$$   | $$  | $$      | $$  | $$ \\$$     \\| $$       \\$$    $$"));
     9d6:	85 e3       	ldi	r24, 0x35	; 53
     9d8:	91 e0       	ldi	r25, 0x01	; 1
     9da:	9f 93       	push	r25
     9dc:	8f 93       	push	r24
     9de:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <printf_P>
	move_terminal_cursor(10,12);
     9e2:	6c e0       	ldi	r22, 0x0C	; 12
     9e4:	70 e0       	ldi	r23, 0x00	; 0
     9e6:	8a e0       	ldi	r24, 0x0A	; 10
     9e8:	90 e0       	ldi	r25, 0x00	; 0
     9ea:	0e 94 62 07 	call	0xec4	; 0xec4 <move_terminal_cursor>
	printf_P(PSTR(" \\$$   \\$$     \\$     \\$$   \\$$       \\$$   \\$$  \\$$$$$$$ \\$$        \\$$$$$$"));
     9ee:	88 ee       	ldi	r24, 0xE8	; 232
     9f0:	90 e0       	ldi	r25, 0x00	; 0
     9f2:	9f 93       	push	r25
     9f4:	8f 93       	push	r24
     9f6:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <printf_P>
	move_terminal_cursor(10,14);
     9fa:	6e e0       	ldi	r22, 0x0E	; 14
     9fc:	70 e0       	ldi	r23, 0x00	; 0
     9fe:	8a e0       	ldi	r24, 0x0A	; 10
     a00:	90 e0       	ldi	r25, 0x00	; 0
     a02:	0e 94 62 07 	call	0xec4	; 0xec4 <move_terminal_cursor>
	// change this to your name and student number; remove the chevrons <>
	printf_P(PSTR("CSSE2010/7201 A2 by LUNDAASUREN MUNKHBAT - 47668599"));
     a06:	84 eb       	ldi	r24, 0xB4	; 180
     a08:	90 e0       	ldi	r25, 0x00	; 0
     a0a:	9f 93       	push	r25
     a0c:	8f 93       	push	r24
     a0e:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <printf_P>
	
	// Output the static start screen and wait for a push button 
	// to be pushed or a serial input of 's'
	show_start_screen();
     a12:	0e 94 a3 02 	call	0x546	; 0x546 <show_start_screen>

	uint32_t last_screen_update, current_time;
	last_screen_update = get_current_time();
     a16:	0e 94 b1 07 	call	0xf62	; 0xf62 <get_current_time>
     a1a:	4b 01       	movw	r8, r22
     a1c:	5c 01       	movw	r10, r24
	
	uint8_t frame_number = 0;
	game_speed = 1000;
     a1e:	88 ee       	ldi	r24, 0xE8	; 232
     a20:	93 e0       	ldi	r25, 0x03	; 3
     a22:	90 93 ae 01 	sts	0x01AE, r25	; 0x8001ae <game_speed+0x1>
     a26:	80 93 ad 01 	sts	0x01AD, r24	; 0x8001ad <game_speed>
     a2a:	8d b7       	in	r24, 0x3d	; 61
     a2c:	9e b7       	in	r25, 0x3e	; 62
     a2e:	44 96       	adiw	r24, 0x14	; 20
     a30:	0f b6       	in	r0, 0x3f	; 63
     a32:	f8 94       	cli
     a34:	9e bf       	out	0x3e, r25	; 62
     a36:	0f be       	out	0x3f, r0	; 63
     a38:	8d bf       	out	0x3d, r24	; 61
	show_start_screen();

	uint32_t last_screen_update, current_time;
	last_screen_update = get_current_time();
	
	uint8_t frame_number = 0;
     a3a:	c0 e0       	ldi	r28, 0x00	; 0
		// First check for if a 's' is pressed
		// There are two steps to this
		// 1) collect any serial input (if available)
		// 2) check if the input is equal to the character 's'
		char serial_input = -1;
		if (serial_input_available())
     a3c:	0e 94 8f 06 	call	0xd1e	; 0xd1e <serial_input_available>
     a40:	88 23       	and	r24, r24
     a42:	39 f0       	breq	.+14     	; 0xa52 <__stack+0x153>
		{
			serial_input = fgetc(stdin);
     a44:	80 91 c3 02 	lds	r24, 0x02C3	; 0x8002c3 <__iob>
     a48:	90 91 c4 02 	lds	r25, 0x02C4	; 0x8002c4 <__iob+0x1>
     a4c:	0e 94 3e 08 	call	0x107c	; 0x107c <fgetc>
     a50:	01 c0       	rjmp	.+2      	; 0xa54 <__stack+0x155>
	{
		// First check for if a 's' is pressed
		// There are two steps to this
		// 1) collect any serial input (if available)
		// 2) check if the input is equal to the character 's'
		char serial_input = -1;
     a52:	8f ef       	ldi	r24, 0xFF	; 255
		if (serial_input_available())
		{
			serial_input = fgetc(stdin);
		}
		// If the serial input is 's', then exit the start screen
		if (serial_input == 's' || serial_input == 'S')
     a54:	83 37       	cpi	r24, 0x73	; 115
     a56:	99 f1       	breq	.+102    	; 0xabe <__stack+0x1bf>
     a58:	83 35       	cpi	r24, 0x53	; 83
     a5a:	89 f1       	breq	.+98     	; 0xabe <__stack+0x1bf>
		{
			break;
		}
		// Next check for any button presses
		int8_t btn = button_pushed();
     a5c:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <button_pushed>
		if (btn != NO_BUTTON_PUSHED)
     a60:	8f 3f       	cpi	r24, 0xFF	; 255
     a62:	69 f5       	brne	.+90     	; 0xabe <__stack+0x1bf>
		{
			break;
		}

		// every 200 ms, update the animation
		current_time = get_current_time();
     a64:	0e 94 b1 07 	call	0xf62	; 0xf62 <get_current_time>
     a68:	6b 01       	movw	r12, r22
     a6a:	7c 01       	movw	r14, r24
		if (current_time - last_screen_update > game_speed/5)
     a6c:	2b 01       	movw	r4, r22
     a6e:	3c 01       	movw	r6, r24
     a70:	48 18       	sub	r4, r8
     a72:	59 08       	sbc	r5, r9
     a74:	6a 08       	sbc	r6, r10
     a76:	7b 08       	sbc	r7, r11
     a78:	20 91 ad 01 	lds	r18, 0x01AD	; 0x8001ad <game_speed>
     a7c:	30 91 ae 01 	lds	r19, 0x01AE	; 0x8001ae <game_speed+0x1>
     a80:	ad ec       	ldi	r26, 0xCD	; 205
     a82:	bc ec       	ldi	r27, 0xCC	; 204
     a84:	0e 94 0d 08 	call	0x101a	; 0x101a <__umulhisi3>
     a88:	96 95       	lsr	r25
     a8a:	87 95       	ror	r24
     a8c:	96 95       	lsr	r25
     a8e:	87 95       	ror	r24
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	84 15       	cp	r24, r4
     a96:	95 05       	cpc	r25, r5
     a98:	a6 05       	cpc	r26, r6
     a9a:	b7 05       	cpc	r27, r7
     a9c:	78 f6       	brcc	.-98     	; 0xa3c <__stack+0x13d>
		{
			update_start_screen(frame_number);
     a9e:	8c 2f       	mov	r24, r28
     aa0:	0e 94 61 02 	call	0x4c2	; 0x4c2 <update_start_screen>
			frame_number = (frame_number + 1) % 32;
     aa4:	d0 e0       	ldi	r29, 0x00	; 0
     aa6:	21 96       	adiw	r28, 0x01	; 1
     aa8:	cf 71       	andi	r28, 0x1F	; 31
     aaa:	d0 78       	andi	r29, 0x80	; 128
     aac:	dd 23       	and	r29, r29
     aae:	24 f4       	brge	.+8      	; 0xab8 <__stack+0x1b9>
     ab0:	21 97       	sbiw	r28, 0x01	; 1
     ab2:	c0 6e       	ori	r28, 0xE0	; 224
     ab4:	df 6f       	ori	r29, 0xFF	; 255
     ab6:	21 96       	adiw	r28, 0x01	; 1
			last_screen_update = current_time;
     ab8:	46 01       	movw	r8, r12
     aba:	57 01       	movw	r10, r14
     abc:	bf cf       	rjmp	.-130    	; 0xa3c <__stack+0x13d>
		}
	}
}
     abe:	df 91       	pop	r29
     ac0:	cf 91       	pop	r28
     ac2:	ff 90       	pop	r15
     ac4:	ef 90       	pop	r14
     ac6:	df 90       	pop	r13
     ac8:	cf 90       	pop	r12
     aca:	bf 90       	pop	r11
     acc:	af 90       	pop	r10
     ace:	9f 90       	pop	r9
     ad0:	8f 90       	pop	r8
     ad2:	7f 90       	pop	r7
     ad4:	6f 90       	pop	r6
     ad6:	5f 90       	pop	r5
     ad8:	4f 90       	pop	r4
     ada:	08 95       	ret

00000adc <new_game>:

void new_game(void)
{
	// Clear the serial terminal
	clear_terminal();
     adc:	0e 94 73 07 	call	0xee6	; 0xee6 <clear_terminal>
	
	// Initialise the game and display
	initialise_game();
     ae0:	0e 94 4c 03 	call	0x698	; 0x698 <initialise_game>
	
	// Clear a button push or serial input if any are waiting
	// (The cast to void means the return value is ignored.)
	(void)button_pushed();
     ae4:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <button_pushed>
	clear_serial_input_buffer();
     ae8:	0e 94 96 06 	call	0xd2c	; 0xd2c <clear_serial_input_buffer>
     aec:	08 95       	ret

00000aee <play_game>:
}

void play_game(void)
{
     aee:	8f 92       	push	r8
     af0:	9f 92       	push	r9
     af2:	af 92       	push	r10
     af4:	bf 92       	push	r11
     af6:	cf 92       	push	r12
     af8:	df 92       	push	r13
     afa:	ef 92       	push	r14
     afc:	ff 92       	push	r15
	
	uint32_t last_advance_time, current_time;
	int8_t btn; // The button pushed
	
	last_advance_time = get_current_time();
     afe:	0e 94 b1 07 	call	0xf62	; 0xf62 <get_current_time>
     b02:	4b 01       	movw	r8, r22
     b04:	5c 01       	movw	r10, r24
	
	// We play the game until it's over
	while (!is_game_over())
     b06:	25 c0       	rjmp	.+74     	; 0xb52 <play_game+0x64>
				
		// We need to check if any button has been pushed, this will be
		// NO_BUTTON_PUSHED if no button has been pushed
		// Checkout the function comment in `buttons.h` and the implementation
		// in `buttons.c`.
		btn = button_pushed();
     b08:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <button_pushed>
		
		if (btn == BUTTON0_PUSHED)
     b0c:	81 11       	cpse	r24, r1
     b0e:	02 c0       	rjmp	.+4      	; 0xb14 <play_game+0x26>
		{
			// If button 0 play the lowest note (right lane)
			play_note(0);
     b10:	0e 94 53 03 	call	0x6a6	; 0x6a6 <play_note>
		}
		
		current_time = get_current_time();
     b14:	0e 94 b1 07 	call	0xf62	; 0xf62 <get_current_time>
     b18:	6b 01       	movw	r12, r22
     b1a:	7c 01       	movw	r14, r24
		if (current_time >= last_advance_time + game_speed/5)
     b1c:	20 91 ad 01 	lds	r18, 0x01AD	; 0x8001ad <game_speed>
     b20:	30 91 ae 01 	lds	r19, 0x01AE	; 0x8001ae <game_speed+0x1>
     b24:	ad ec       	ldi	r26, 0xCD	; 205
     b26:	bc ec       	ldi	r27, 0xCC	; 204
     b28:	0e 94 0d 08 	call	0x101a	; 0x101a <__umulhisi3>
     b2c:	96 95       	lsr	r25
     b2e:	87 95       	ror	r24
     b30:	96 95       	lsr	r25
     b32:	87 95       	ror	r24
     b34:	a5 01       	movw	r20, r10
     b36:	94 01       	movw	r18, r8
     b38:	28 0f       	add	r18, r24
     b3a:	39 1f       	adc	r19, r25
     b3c:	41 1d       	adc	r20, r1
     b3e:	51 1d       	adc	r21, r1
     b40:	c2 16       	cp	r12, r18
     b42:	d3 06       	cpc	r13, r19
     b44:	e4 06       	cpc	r14, r20
     b46:	f5 06       	cpc	r15, r21
     b48:	20 f0       	brcs	.+8      	; 0xb52 <play_game+0x64>
		{
			// 200ms (0.2 second) has passed since the last time we advance the
			// notes here, so update the advance the notes
			advance_note();
     b4a:	0e 94 54 03 	call	0x6a8	; 0x6a8 <advance_note>
			
			// Update the most recent time the notes were advance
			last_advance_time = current_time;
     b4e:	46 01       	movw	r8, r12
     b50:	57 01       	movw	r10, r14
	int8_t btn; // The button pushed
	
	last_advance_time = get_current_time();
	
	// We play the game until it's over
	while (!is_game_over())
     b52:	0e 94 1f 04 	call	0x83e	; 0x83e <is_game_over>
     b56:	88 23       	and	r24, r24
     b58:	b9 f2       	breq	.-82     	; 0xb08 <play_game+0x1a>
			// Update the most recent time the notes were advance
			last_advance_time = current_time;
		}
	}
	// We get here if the game is over.
}
     b5a:	ff 90       	pop	r15
     b5c:	ef 90       	pop	r14
     b5e:	df 90       	pop	r13
     b60:	cf 90       	pop	r12
     b62:	bf 90       	pop	r11
     b64:	af 90       	pop	r10
     b66:	9f 90       	pop	r9
     b68:	8f 90       	pop	r8
     b6a:	08 95       	ret

00000b6c <handle_game_over>:

void handle_game_over()
{
	move_terminal_cursor(10,14);
     b6c:	6e e0       	ldi	r22, 0x0E	; 14
     b6e:	70 e0       	ldi	r23, 0x00	; 0
     b70:	8a e0       	ldi	r24, 0x0A	; 10
     b72:	90 e0       	ldi	r25, 0x00	; 0
     b74:	0e 94 62 07 	call	0xec4	; 0xec4 <move_terminal_cursor>
	printf_P(PSTR("GAME OVER"));
     b78:	8a ea       	ldi	r24, 0xAA	; 170
     b7a:	90 e0       	ldi	r25, 0x00	; 0
     b7c:	9f 93       	push	r25
     b7e:	8f 93       	push	r24
     b80:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <printf_P>
	move_terminal_cursor(10,15);
     b84:	6f e0       	ldi	r22, 0x0F	; 15
     b86:	70 e0       	ldi	r23, 0x00	; 0
     b88:	8a e0       	ldi	r24, 0x0A	; 10
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	0e 94 62 07 	call	0xec4	; 0xec4 <move_terminal_cursor>
	printf_P(PSTR("Press a button or 's'/'S' to start a new game"));
     b90:	8c e7       	ldi	r24, 0x7C	; 124
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	9f 93       	push	r25
     b96:	8f 93       	push	r24
     b98:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <printf_P>
	
	// Do nothing until a button is pushed. Hint: 's'/'S' should also start a
	// new game
	while (button_pushed() == NO_BUTTON_PUSHED)
     b9c:	0f 90       	pop	r0
     b9e:	0f 90       	pop	r0
     ba0:	0f 90       	pop	r0
     ba2:	0f 90       	pop	r0
     ba4:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <button_pushed>
     ba8:	8f 3f       	cpi	r24, 0xFF	; 255
     baa:	e1 f3       	breq	.-8      	; 0xba4 <handle_game_over+0x38>
	{
		; // wait
	}
}
     bac:	08 95       	ret

00000bae <main>:
/////////////////////////////// main //////////////////////////////////
int main(void)
{
	// Setup hardware and call backs. This will turn on 
	// interrupts.
	initialise_hardware();
     bae:	0e 94 65 04 	call	0x8ca	; 0x8ca <initialise_hardware>
	
	// Show the splash screen message. Returns when display
	// is complete.
	start_screen();
     bb2:	0e 94 78 04 	call	0x8f0	; 0x8f0 <start_screen>
	
	// Loop forever and continuously play the game.
	while(1)
	{
		new_game();
     bb6:	0e 94 6e 05 	call	0xadc	; 0xadc <new_game>
		play_game();
     bba:	0e 94 77 05 	call	0xaee	; 0xaee <play_game>
		handle_game_over();
     bbe:	0e 94 b6 05 	call	0xb6c	; 0xb6c <handle_game_over>
     bc2:	f9 cf       	rjmp	.-14     	; 0xbb6 <main+0x8>

00000bc4 <uart_put_char>:
	input_insert_pos = 0;
	bytes_in_input_buffer = 0;
}

static int uart_put_char(char c, FILE* stream)
{
     bc4:	cf 93       	push	r28
     bc6:	c8 2f       	mov	r28, r24
	/* Add the character to the buffer for transmission (if there 
	 * is space to do so). If not we wait until the buffer has space.
	 * If the character is \n, we output \r (carriage return)
	 * also.
	*/
	if (c == '\n')
     bc8:	8a 30       	cpi	r24, 0x0A	; 10
     bca:	19 f4       	brne	.+6      	; 0xbd2 <uart_put_char+0xe>
	{
		uart_put_char('\r', stream);
     bcc:	8d e0       	ldi	r24, 0x0D	; 13
     bce:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <uart_put_char>
	 * never be emptied if interrupts are disabled. If the buffer is full
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
     bd2:	9f b7       	in	r25, 0x3f	; 63
     bd4:	90 78       	andi	r25, 0x80	; 128
	while (bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE)
     bd6:	02 c0       	rjmp	.+4      	; 0xbdc <uart_put_char+0x18>
	{
		if (!interrupts_enabled)
     bd8:	99 23       	and	r25, r25
     bda:	29 f1       	breq	.+74     	; 0xc26 <uart_put_char+0x62>
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while (bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE)
     bdc:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <bytes_in_out_buffer>
     be0:	8f 3f       	cpi	r24, 0xFF	; 255
     be2:	d1 f3       	breq	.-12     	; 0xbd8 <uart_put_char+0x14>
	 * NOTE: we disable interrupts before modifying the buffer. This
	 * prevents the ISR from modifying the buffer at the same time.
	 * We reenable them if they were enabled when we entered the
	 * function.
	*/	
	cli();
     be4:	f8 94       	cli
	out_buffer[out_insert_pos++] = c;
     be6:	e0 91 af 01 	lds	r30, 0x01AF	; 0x8001af <out_insert_pos>
     bea:	81 e0       	ldi	r24, 0x01	; 1
     bec:	8e 0f       	add	r24, r30
     bee:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <out_insert_pos>
     bf2:	f0 e0       	ldi	r31, 0x00	; 0
     bf4:	ef 54       	subi	r30, 0x4F	; 79
     bf6:	fe 4f       	sbci	r31, 0xFE	; 254
     bf8:	c0 83       	st	Z, r28
	bytes_in_out_buffer++;
     bfa:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <bytes_in_out_buffer>
     bfe:	8f 5f       	subi	r24, 0xFF	; 255
     c00:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <bytes_in_out_buffer>
	if (out_insert_pos == OUTPUT_BUFFER_SIZE)
     c04:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <out_insert_pos>
     c08:	8f 3f       	cpi	r24, 0xFF	; 255
     c0a:	11 f4       	brne	.+4      	; 0xc10 <uart_put_char+0x4c>
	{
		/* Wrap around buffer pointer if necessary */
		out_insert_pos = 0;
     c0c:	10 92 af 01 	sts	0x01AF, r1	; 0x8001af <out_insert_pos>
	}
	/* Reenable interrupts (UDR Empty interrupt may have been
	 * disabled) - we ensure it is now enabled so that it will
	 * fire and deal with the next character in the buffer. */
	UCSR0B |= (1 << UDRIE0);
     c10:	e1 ec       	ldi	r30, 0xC1	; 193
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	80 81       	ld	r24, Z
     c16:	80 62       	ori	r24, 0x20	; 32
     c18:	80 83       	st	Z, r24
	if (interrupts_enabled)
     c1a:	99 23       	and	r25, r25
     c1c:	39 f0       	breq	.+14     	; 0xc2c <uart_put_char+0x68>
	{
		sei();
     c1e:	78 94       	sei
	}
	return 0;
     c20:	80 e0       	ldi	r24, 0x00	; 0
     c22:	90 e0       	ldi	r25, 0x00	; 0
     c24:	05 c0       	rjmp	.+10     	; 0xc30 <uart_put_char+0x6c>
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while (bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE)
	{
		if (!interrupts_enabled)
		{
			return 1;
     c26:	81 e0       	ldi	r24, 0x01	; 1
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	02 c0       	rjmp	.+4      	; 0xc30 <uart_put_char+0x6c>
	UCSR0B |= (1 << UDRIE0);
	if (interrupts_enabled)
	{
		sei();
	}
	return 0;
     c2c:	80 e0       	ldi	r24, 0x00	; 0
     c2e:	90 e0       	ldi	r25, 0x00	; 0
}
     c30:	cf 91       	pop	r28
     c32:	08 95       	ret

00000c34 <uart_get_char>:

int uart_get_char(FILE* stream)
{
	/* Wait until we've received a character */
	while (bytes_in_input_buffer == 0)
     c34:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <bytes_in_input_buffer>
     c38:	88 23       	and	r24, r24
     c3a:	e1 f3       	breq	.-8      	; 0xc34 <uart_get_char>
	 * buffer. We reenable interrupts if they were on.
	 * The pending character is the one which is byte_in_input_buffer
	 * characters before the insert position (taking into account
	 * that we may need to wrap around).
	 */
	uint8_t interrupts_enabled = bit_is_set(SREG, SREG_I);
     c3c:	2f b7       	in	r18, 0x3f	; 63
     c3e:	20 78       	andi	r18, 0x80	; 128
	cli();
     c40:	f8 94       	cli
	char c;
	if (input_insert_pos - bytes_in_input_buffer < 0)
     c42:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <input_insert_pos>
     c46:	30 91 c2 02 	lds	r19, 0x02C2	; 0x8002c2 <bytes_in_input_buffer>
     c4a:	90 e0       	ldi	r25, 0x00	; 0
     c4c:	83 1b       	sub	r24, r19
     c4e:	91 09       	sbc	r25, r1
     c50:	5a f4       	brpl	.+22     	; 0xc68 <uart_get_char+0x34>
	{
		/* Need to wrap around */
		c = input_buffer[input_insert_pos - bytes_in_input_buffer
     c52:	e0 91 b0 02 	lds	r30, 0x02B0	; 0x8002b0 <input_insert_pos>
     c56:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <bytes_in_input_buffer>
     c5a:	f0 e0       	ldi	r31, 0x00	; 0
     c5c:	e8 1b       	sub	r30, r24
     c5e:	f1 09       	sbc	r31, r1
     c60:	ef 53       	subi	r30, 0x3F	; 63
     c62:	fd 4f       	sbci	r31, 0xFD	; 253
     c64:	80 81       	ld	r24, Z
     c66:	0a c0       	rjmp	.+20     	; 0xc7c <uart_get_char+0x48>
				+ INPUT_BUFFER_SIZE];
	} else
	{
		c = input_buffer[input_insert_pos - bytes_in_input_buffer];
     c68:	e0 91 b0 02 	lds	r30, 0x02B0	; 0x8002b0 <input_insert_pos>
     c6c:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <bytes_in_input_buffer>
     c70:	f0 e0       	ldi	r31, 0x00	; 0
     c72:	e8 1b       	sub	r30, r24
     c74:	f1 09       	sbc	r31, r1
     c76:	ef 54       	subi	r30, 0x4F	; 79
     c78:	fd 4f       	sbci	r31, 0xFD	; 253
     c7a:	80 81       	ld	r24, Z
	}
	
	/* Decrement our count of bytes in the input buffer */
	bytes_in_input_buffer--;
     c7c:	90 91 c2 02 	lds	r25, 0x02C2	; 0x8002c2 <bytes_in_input_buffer>
     c80:	91 50       	subi	r25, 0x01	; 1
     c82:	90 93 c2 02 	sts	0x02C2, r25	; 0x8002c2 <bytes_in_input_buffer>
	if (interrupts_enabled)
     c86:	22 23       	and	r18, r18
     c88:	09 f0       	breq	.+2      	; 0xc8c <uart_get_char+0x58>
	{
		sei();
     c8a:	78 94       	sei
	}	
	return c;
}
     c8c:	90 e0       	ldi	r25, 0x00	; 0
     c8e:	08 95       	ret

00000c90 <init_serial_stdio>:
{
	uint16_t ubrr;
	/*
	 * Initialise our buffers
	*/
	out_insert_pos = 0;
     c90:	10 92 af 01 	sts	0x01AF, r1	; 0x8001af <out_insert_pos>
	bytes_in_out_buffer = 0;
     c94:	10 92 b0 01 	sts	0x01B0, r1	; 0x8001b0 <bytes_in_out_buffer>
	input_insert_pos = 0;
     c98:	10 92 b0 02 	sts	0x02B0, r1	; 0x8002b0 <input_insert_pos>
	bytes_in_input_buffer = 0;
     c9c:	10 92 c2 02 	sts	0x02C2, r1	; 0x8002c2 <bytes_in_input_buffer>
	input_overrun = 0;
     ca0:	10 92 c1 02 	sts	0x02C1, r1	; 0x8002c1 <input_overrun>
	
	/*
	 * Record whether we're going to echo characters or not
	*/
	do_echo = echo;
     ca4:	40 93 a6 01 	sts	0x01A6, r20	; 0x8001a6 <do_echo>
	/* Configure the serial port baud rate */
	/* (This differs from the datasheet formula so that we get 
	 * rounding to the nearest integer while using integer division
	 * (which truncates)).
	*/
	ubrr = (((SYSCLK / (8 * baudrate)) + 1) / 2) - 1;
     ca8:	dc 01       	movw	r26, r24
     caa:	cb 01       	movw	r24, r22
     cac:	88 0f       	add	r24, r24
     cae:	99 1f       	adc	r25, r25
     cb0:	aa 1f       	adc	r26, r26
     cb2:	bb 1f       	adc	r27, r27
     cb4:	88 0f       	add	r24, r24
     cb6:	99 1f       	adc	r25, r25
     cb8:	aa 1f       	adc	r26, r26
     cba:	bb 1f       	adc	r27, r27
     cbc:	9c 01       	movw	r18, r24
     cbe:	ad 01       	movw	r20, r26
     cc0:	22 0f       	add	r18, r18
     cc2:	33 1f       	adc	r19, r19
     cc4:	44 1f       	adc	r20, r20
     cc6:	55 1f       	adc	r21, r21
     cc8:	60 e0       	ldi	r22, 0x00	; 0
     cca:	72 e1       	ldi	r23, 0x12	; 18
     ccc:	8a e7       	ldi	r24, 0x7A	; 122
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	0e 94 ee 07 	call	0xfdc	; 0xfdc <__divmodsi4>
     cd4:	ba 01       	movw	r22, r20
     cd6:	a9 01       	movw	r20, r18
     cd8:	4f 5f       	subi	r20, 0xFF	; 255
     cda:	5f 4f       	sbci	r21, 0xFF	; 255
     cdc:	6f 4f       	sbci	r22, 0xFF	; 255
     cde:	7f 4f       	sbci	r23, 0xFF	; 255
     ce0:	db 01       	movw	r26, r22
     ce2:	ca 01       	movw	r24, r20
     ce4:	1a f4       	brpl	.+6      	; 0xcec <init_serial_stdio+0x5c>
     ce6:	01 96       	adiw	r24, 0x01	; 1
     ce8:	a1 1d       	adc	r26, r1
     cea:	b1 1d       	adc	r27, r1
     cec:	b5 95       	asr	r27
     cee:	a7 95       	ror	r26
     cf0:	97 95       	ror	r25
     cf2:	87 95       	ror	r24
     cf4:	01 97       	sbiw	r24, 0x01	; 1
	UBRR0 = ubrr;
     cf6:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
     cfa:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	 * the UDR empty interrupt here (we wait until we've got a
	 * character to transmit).
	 * NOTE: Interrupts must be enabled globally for this
	 * library to work, but we do not do this here.
	*/
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
     cfe:	e1 ec       	ldi	r30, 0xC1	; 193
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	88 e1       	ldi	r24, 0x18	; 24
     d04:	80 83       	st	Z, r24
	
	/*
	 * Enable receive complete interrupt 
	*/
	UCSR0B  |= (1 << RXCIE0);
     d06:	80 81       	ld	r24, Z
     d08:	80 68       	ori	r24, 0x80	; 128
     d0a:	80 83       	st	Z, r24

	/* Set up our stream so the put and get functions below are used 
	 * to write/read characters via the serial port when we use
	 * stdio functions
	*/
	stdout = &myStream;
     d0c:	e3 ec       	ldi	r30, 0xC3	; 195
     d0e:	f2 e0       	ldi	r31, 0x02	; 2
     d10:	80 e0       	ldi	r24, 0x00	; 0
     d12:	91 e0       	ldi	r25, 0x01	; 1
     d14:	93 83       	std	Z+3, r25	; 0x03
     d16:	82 83       	std	Z+2, r24	; 0x02
	stdin = &myStream;
     d18:	91 83       	std	Z+1, r25	; 0x01
     d1a:	80 83       	st	Z, r24
     d1c:	08 95       	ret

00000d1e <serial_input_available>:
}

int8_t serial_input_available(void)
{
	return bytes_in_input_buffer != 0;
     d1e:	90 91 c2 02 	lds	r25, 0x02C2	; 0x8002c2 <bytes_in_input_buffer>
     d22:	81 e0       	ldi	r24, 0x01	; 1
     d24:	91 11       	cpse	r25, r1
     d26:	01 c0       	rjmp	.+2      	; 0xd2a <serial_input_available+0xc>
     d28:	80 e0       	ldi	r24, 0x00	; 0
}
     d2a:	08 95       	ret

00000d2c <clear_serial_input_buffer>:

void clear_serial_input_buffer(void)
{
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
     d2c:	10 92 b0 02 	sts	0x02B0, r1	; 0x8002b0 <input_insert_pos>
	bytes_in_input_buffer = 0;
     d30:	10 92 c2 02 	sts	0x02C2, r1	; 0x8002c2 <bytes_in_input_buffer>
     d34:	08 95       	ret

00000d36 <__vector_21>:
/*
 * Define the interrupt handler for UART Data Register Empty (i.e. 
 * another character can be taken from our buffer and written out)
 */
ISR(USART0_UDRE_vect) 
{
     d36:	1f 92       	push	r1
     d38:	0f 92       	push	r0
     d3a:	0f b6       	in	r0, 0x3f	; 63
     d3c:	0f 92       	push	r0
     d3e:	11 24       	eor	r1, r1
     d40:	2f 93       	push	r18
     d42:	8f 93       	push	r24
     d44:	9f 93       	push	r25
     d46:	ef 93       	push	r30
     d48:	ff 93       	push	r31
	/* Check if we have data in our buffer */
	if (bytes_in_out_buffer > 0)
     d4a:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <bytes_in_out_buffer>
     d4e:	88 23       	and	r24, r24
     d50:	29 f1       	breq	.+74     	; 0xd9c <__vector_21+0x66>
		 * one which is "bytes_in_buffer" characters before the 
		 * insert_pos (taking into account that we may 
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if (out_insert_pos - bytes_in_out_buffer < 0)
     d52:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <out_insert_pos>
     d56:	20 91 b0 01 	lds	r18, 0x01B0	; 0x8001b0 <bytes_in_out_buffer>
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	82 1b       	sub	r24, r18
     d5e:	91 09       	sbc	r25, r1
     d60:	5a f4       	brpl	.+22     	; 0xd78 <__vector_21+0x42>
		{
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
     d62:	e0 91 af 01 	lds	r30, 0x01AF	; 0x8001af <out_insert_pos>
     d66:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <bytes_in_out_buffer>
     d6a:	f0 e0       	ldi	r31, 0x00	; 0
     d6c:	e8 1b       	sub	r30, r24
     d6e:	f1 09       	sbc	r31, r1
     d70:	e0 55       	subi	r30, 0x50	; 80
     d72:	fd 4f       	sbci	r31, 0xFD	; 253
     d74:	90 81       	ld	r25, Z
     d76:	0a c0       	rjmp	.+20     	; 0xd8c <__vector_21+0x56>
				+ OUTPUT_BUFFER_SIZE];
		} else
		{
			c = out_buffer[out_insert_pos - bytes_in_out_buffer];
     d78:	e0 91 af 01 	lds	r30, 0x01AF	; 0x8001af <out_insert_pos>
     d7c:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <bytes_in_out_buffer>
     d80:	f0 e0       	ldi	r31, 0x00	; 0
     d82:	e8 1b       	sub	r30, r24
     d84:	f1 09       	sbc	r31, r1
     d86:	ef 54       	subi	r30, 0x4F	; 79
     d88:	fe 4f       	sbci	r31, 0xFE	; 254
     d8a:	90 81       	ld	r25, Z
		}
		/* Decrement our count of the number of bytes in the 
		 * buffer 
		 */
		bytes_in_out_buffer--;
     d8c:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <bytes_in_out_buffer>
     d90:	81 50       	subi	r24, 0x01	; 1
     d92:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <bytes_in_out_buffer>
		
		/* Output the character via the UART */
		UDR0 = c;
     d96:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     d9a:	05 c0       	rjmp	.+10     	; 0xda6 <__vector_21+0x70>
		 * Register Empty interrupt because otherwise it 
		 * will trigger again immediately this ISR exits. 
		 * The interrupt is reenabled when a character is
		 * placed in the buffer.
		 */
		UCSR0B &= ~(1 << UDRIE0);
     d9c:	e1 ec       	ldi	r30, 0xC1	; 193
     d9e:	f0 e0       	ldi	r31, 0x00	; 0
     da0:	80 81       	ld	r24, Z
     da2:	8f 7d       	andi	r24, 0xDF	; 223
     da4:	80 83       	st	Z, r24
	}
}
     da6:	ff 91       	pop	r31
     da8:	ef 91       	pop	r30
     daa:	9f 91       	pop	r25
     dac:	8f 91       	pop	r24
     dae:	2f 91       	pop	r18
     db0:	0f 90       	pop	r0
     db2:	0f be       	out	0x3f, r0	; 63
     db4:	0f 90       	pop	r0
     db6:	1f 90       	pop	r1
     db8:	18 95       	reti

00000dba <__vector_20>:
 * we can read a character. The character is read and placed in
 * the input buffer.
 */

ISR(USART0_RX_vect) 
{
     dba:	1f 92       	push	r1
     dbc:	0f 92       	push	r0
     dbe:	0f b6       	in	r0, 0x3f	; 63
     dc0:	0f 92       	push	r0
     dc2:	11 24       	eor	r1, r1
     dc4:	2f 93       	push	r18
     dc6:	3f 93       	push	r19
     dc8:	4f 93       	push	r20
     dca:	5f 93       	push	r21
     dcc:	6f 93       	push	r22
     dce:	7f 93       	push	r23
     dd0:	8f 93       	push	r24
     dd2:	9f 93       	push	r25
     dd4:	af 93       	push	r26
     dd6:	bf 93       	push	r27
     dd8:	cf 93       	push	r28
     dda:	ef 93       	push	r30
     ddc:	ff 93       	push	r31
	/* Read the character - we ignore the possibility of overrun. */
	char c;
	c = UDR0;
     dde:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		
	if (do_echo && bytes_in_out_buffer < OUTPUT_BUFFER_SIZE)
     de2:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <do_echo>
     de6:	88 23       	and	r24, r24
     de8:	49 f0       	breq	.+18     	; 0xdfc <__vector_20+0x42>
     dea:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <bytes_in_out_buffer>
     dee:	8f 3f       	cpi	r24, 0xFF	; 255
     df0:	29 f0       	breq	.+10     	; 0xdfc <__vector_20+0x42>
		/* If echoing is enabled and there is output buffer
		 * space, echo the received character back to the UART.
		 * (If there is no output buffer space, characters
		 * will be lost.)
		 */
		uart_put_char(c, 0);
     df2:	60 e0       	ldi	r22, 0x00	; 0
     df4:	70 e0       	ldi	r23, 0x00	; 0
     df6:	8c 2f       	mov	r24, r28
     df8:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <uart_put_char>
	 * Check if we have space in our buffer. If not, set the overrun
	 * flag and throw away the character. (We never clear the 
	 * overrun flag - it's up to the programmer to check/clear
	 * this flag if desired.)
	 */
	if (bytes_in_input_buffer >= INPUT_BUFFER_SIZE)
     dfc:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <bytes_in_input_buffer>
     e00:	80 31       	cpi	r24, 0x10	; 16
     e02:	20 f0       	brcs	.+8      	; 0xe0c <__vector_20+0x52>
	{
		input_overrun = 1;
     e04:	81 e0       	ldi	r24, 0x01	; 1
     e06:	80 93 c1 02 	sts	0x02C1, r24	; 0x8002c1 <input_overrun>
     e0a:	18 c0       	rjmp	.+48     	; 0xe3c <__vector_20+0x82>
	} else
	{
		/* If the character is a carriage return, turn it into a
		 * linefeed 
		*/
		if (c == '\r')
     e0c:	cd 30       	cpi	r28, 0x0D	; 13
     e0e:	09 f4       	brne	.+2      	; 0xe12 <__vector_20+0x58>
		{
			c = '\n';
     e10:	ca e0       	ldi	r28, 0x0A	; 10
		}
		
		/* 
		 * There is room in the input buffer 
		 */
		input_buffer[input_insert_pos++] = c;
     e12:	e0 91 b0 02 	lds	r30, 0x02B0	; 0x8002b0 <input_insert_pos>
     e16:	81 e0       	ldi	r24, 0x01	; 1
     e18:	8e 0f       	add	r24, r30
     e1a:	80 93 b0 02 	sts	0x02B0, r24	; 0x8002b0 <input_insert_pos>
     e1e:	f0 e0       	ldi	r31, 0x00	; 0
     e20:	ef 54       	subi	r30, 0x4F	; 79
     e22:	fd 4f       	sbci	r31, 0xFD	; 253
     e24:	c0 83       	st	Z, r28
		bytes_in_input_buffer++;
     e26:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <bytes_in_input_buffer>
     e2a:	8f 5f       	subi	r24, 0xFF	; 255
     e2c:	80 93 c2 02 	sts	0x02C2, r24	; 0x8002c2 <bytes_in_input_buffer>
		if (input_insert_pos == INPUT_BUFFER_SIZE)
     e30:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <input_insert_pos>
     e34:	80 31       	cpi	r24, 0x10	; 16
     e36:	11 f4       	brne	.+4      	; 0xe3c <__vector_20+0x82>
		{
			/* Wrap around buffer pointer if necessary */
			input_insert_pos = 0;
     e38:	10 92 b0 02 	sts	0x02B0, r1	; 0x8002b0 <input_insert_pos>
		}
	}
}
     e3c:	ff 91       	pop	r31
     e3e:	ef 91       	pop	r30
     e40:	cf 91       	pop	r28
     e42:	bf 91       	pop	r27
     e44:	af 91       	pop	r26
     e46:	9f 91       	pop	r25
     e48:	8f 91       	pop	r24
     e4a:	7f 91       	pop	r23
     e4c:	6f 91       	pop	r22
     e4e:	5f 91       	pop	r21
     e50:	4f 91       	pop	r20
     e52:	3f 91       	pop	r19
     e54:	2f 91       	pop	r18
     e56:	0f 90       	pop	r0
     e58:	0f be       	out	0x3f, r0	; 63
     e5a:	0f 90       	pop	r0
     e5c:	1f 90       	pop	r1
     e5e:	18 95       	reti

00000e60 <spi_setup_master>:
void spi_setup_master(uint8_t clockdivider)
{
	// Set up SPI communication as a master
	// Make the SS, MOSI and SCK pins outputs. These are pins
	// 4, 5 and 7 of port B on the ATmega324A
	DDRB |= (1 << DDB7) | (1 << DDB5) | (1 << DDB4);
     e60:	94 b1       	in	r25, 0x04	; 4
     e62:	90 6b       	ori	r25, 0xB0	; 176
     e64:	94 b9       	out	0x04, r25	; 4
	
	// Set the slave select (SS) line high
	PORTB |= (1 << PORTB4);
     e66:	95 b1       	in	r25, 0x05	; 5
     e68:	90 61       	ori	r25, 0x10	; 16
     e6a:	95 b9       	out	0x05, r25	; 5
	
	// Set up the SPI control registers SPCR and SPSR:
	// - SPE bit = 1 (SPI is enabled)
	// - MSTR bit = 1 (Master Mode)
	SPCR0 = (1 << SPE0) | (1 << MSTR0);
     e6c:	90 e5       	ldi	r25, 0x50	; 80
     e6e:	9c bd       	out	0x2c, r25	; 44
	
	// Set SPR0 and SPR1 bits in SPCR and SPI2X bit in SPSR
	// based on the given clock divider
	// Invalid values default to the slowest speed
	// We consider each bit in turn
	switch (clockdivider)
     e70:	88 30       	cpi	r24, 0x08	; 8
     e72:	21 f0       	breq	.+8      	; 0xe7c <spi_setup_master+0x1c>
     e74:	80 32       	cpi	r24, 0x20	; 32
     e76:	11 f0       	breq	.+4      	; 0xe7c <spi_setup_master+0x1c>
     e78:	82 30       	cpi	r24, 0x02	; 2
     e7a:	19 f4       	brne	.+6      	; 0xe82 <spi_setup_master+0x22>
	{
		case 2: /* FALLTHROUGH */
		case 8: /* FALLTHROUGH */
		case 32:
			SPSR0 = (1 << SPI2X0);
     e7c:	91 e0       	ldi	r25, 0x01	; 1
     e7e:	9d bd       	out	0x2d, r25	; 45
			break;
     e80:	01 c0       	rjmp	.+2      	; 0xe84 <spi_setup_master+0x24>
		default:
			SPSR0 = 0;
     e82:	1d bc       	out	0x2d, r1	; 45
			break;
	}
	switch (clockdivider)
     e84:	80 32       	cpi	r24, 0x20	; 32
     e86:	69 f0       	breq	.+26     	; 0xea2 <spi_setup_master+0x42>
     e88:	28 f4       	brcc	.+10     	; 0xe94 <spi_setup_master+0x34>
     e8a:	88 30       	cpi	r24, 0x08	; 8
     e8c:	71 f0       	breq	.+28     	; 0xeaa <spi_setup_master+0x4a>
     e8e:	80 31       	cpi	r24, 0x10	; 16
     e90:	61 f0       	breq	.+24     	; 0xeaa <spi_setup_master+0x4a>
     e92:	0e c0       	rjmp	.+28     	; 0xeb0 <spi_setup_master+0x50>
     e94:	80 34       	cpi	r24, 0x40	; 64
     e96:	29 f0       	breq	.+10     	; 0xea2 <spi_setup_master+0x42>
     e98:	80 38       	cpi	r24, 0x80	; 128
     e9a:	51 f4       	brne	.+20     	; 0xeb0 <spi_setup_master+0x50>
	{
		case 128:
			SPCR0 |= (1 << SPR00);
     e9c:	8c b5       	in	r24, 0x2c	; 44
     e9e:	81 60       	ori	r24, 0x01	; 1
     ea0:	8c bd       	out	0x2c, r24	; 44
			/* FALLTHROUGH */
		case 32: /* FALLTHROUGH */
		case 64:
			SPCR0 |= (1 << SPR10);
     ea2:	8c b5       	in	r24, 0x2c	; 44
     ea4:	82 60       	ori	r24, 0x02	; 2
     ea6:	8c bd       	out	0x2c, r24	; 44
			break;
     ea8:	03 c0       	rjmp	.+6      	; 0xeb0 <spi_setup_master+0x50>
		case 8: /* FALLTHROUGH */
		case 16:
			SPCR0 |= (1 << SPR00);
     eaa:	8c b5       	in	r24, 0x2c	; 44
     eac:	81 60       	ori	r24, 0x01	; 1
     eae:	8c bd       	out	0x2c, r24	; 44
			break;
	}
	
	// Take SS (slave select) line low
	PORTB &= ~(1 << PORTB4);
     eb0:	85 b1       	in	r24, 0x05	; 5
     eb2:	8f 7e       	andi	r24, 0xEF	; 239
     eb4:	85 b9       	out	0x05, r24	; 5
     eb6:	08 95       	ret

00000eb8 <spi_send_byte>:
	// the transfer. We then wait until the most significant byte of
	// SPSR0 (SPIF0 bit) is set - this indicates that the transfer is
	// complete. (The final read of SPSR0 followed by a read of SPDR0
	// will cause the SPIF bit to be reset to 0. See page 173 of the 
	// ATmega324A datasheet.)
	SPDR0 = byte;
     eb8:	8e bd       	out	0x2e, r24	; 46
	while ((SPSR0 & (1 << SPIF0)) == 0)
     eba:	0d b4       	in	r0, 0x2d	; 45
     ebc:	07 fe       	sbrs	r0, 7
     ebe:	fd cf       	rjmp	.-6      	; 0xeba <spi_send_byte+0x2>
	{
		; // wait
	}
	return SPDR0;
     ec0:	8e b5       	in	r24, 0x2e	; 46
}
     ec2:	08 95       	ret

00000ec4 <move_terminal_cursor>:
}

void clear_to_end_of_line(void)
{
	printf_P(PSTR("\x1b[K"));
}
     ec4:	9f 93       	push	r25
     ec6:	8f 93       	push	r24
     ec8:	7f 93       	push	r23
     eca:	6f 93       	push	r22
     ecc:	8e e7       	ldi	r24, 0x7E	; 126
     ece:	93 e0       	ldi	r25, 0x03	; 3
     ed0:	9f 93       	push	r25
     ed2:	8f 93       	push	r24
     ed4:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <printf_P>
     ed8:	0f 90       	pop	r0
     eda:	0f 90       	pop	r0
     edc:	0f 90       	pop	r0
     ede:	0f 90       	pop	r0
     ee0:	0f 90       	pop	r0
     ee2:	0f 90       	pop	r0
     ee4:	08 95       	ret

00000ee6 <clear_terminal>:
     ee6:	89 e7       	ldi	r24, 0x79	; 121
     ee8:	93 e0       	ldi	r25, 0x03	; 3
     eea:	9f 93       	push	r25
     eec:	8f 93       	push	r24
     eee:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <printf_P>
     ef2:	0f 90       	pop	r0
     ef4:	0f 90       	pop	r0
     ef6:	08 95       	ret

00000ef8 <set_display_attribute>:

void set_display_attribute(DisplayParameter parameter)
{
	printf_P(PSTR("\x1b[%dm"), parameter);
     ef8:	1f 92       	push	r1
     efa:	8f 93       	push	r24
     efc:	83 e7       	ldi	r24, 0x73	; 115
     efe:	93 e0       	ldi	r25, 0x03	; 3
     f00:	9f 93       	push	r25
     f02:	8f 93       	push	r24
     f04:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <printf_P>
}
     f08:	0f 90       	pop	r0
     f0a:	0f 90       	pop	r0
     f0c:	0f 90       	pop	r0
     f0e:	0f 90       	pop	r0
     f10:	08 95       	ret

00000f12 <hide_cursor>:

void hide_cursor()
{
	printf_P(PSTR("\x1b[?25l"));
     f12:	8c e6       	ldi	r24, 0x6C	; 108
     f14:	93 e0       	ldi	r25, 0x03	; 3
     f16:	9f 93       	push	r25
     f18:	8f 93       	push	r24
     f1a:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <printf_P>
}
     f1e:	0f 90       	pop	r0
     f20:	0f 90       	pop	r0
     f22:	08 95       	ret

00000f24 <show_cursor>:

void show_cursor()
{
	printf_P(PSTR("\x1b[?25h"));
     f24:	85 e6       	ldi	r24, 0x65	; 101
     f26:	93 e0       	ldi	r25, 0x03	; 3
     f28:	9f 93       	push	r25
     f2a:	8f 93       	push	r24
     f2c:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <printf_P>
}
     f30:	0f 90       	pop	r0
     f32:	0f 90       	pop	r0
     f34:	08 95       	ret

00000f36 <init_timer0>:
void init_timer0(void)
{
	/* Reset clock tick count. L indicates a long (32 bit) 
	 * constant. 
	 */
	clock_ticks_ms = 0L;
     f36:	10 92 a7 01 	sts	0x01A7, r1	; 0x8001a7 <clock_ticks_ms>
     f3a:	10 92 a8 01 	sts	0x01A8, r1	; 0x8001a8 <clock_ticks_ms+0x1>
     f3e:	10 92 a9 01 	sts	0x01A9, r1	; 0x8001a9 <clock_ticks_ms+0x2>
     f42:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <clock_ticks_ms+0x3>
	
	/* Clear the timer */
	TCNT0 = 0;
     f46:	16 bc       	out	0x26, r1	; 38

	/* Set the output compare value to be 124 */
	OCR0A = 124;
     f48:	8c e7       	ldi	r24, 0x7C	; 124
     f4a:	87 bd       	out	0x27, r24	; 39
	
	/* Set the timer to clear on compare match (CTC mode)
	 * and to divide the clock by 64. This starts the timer
	 * running.
	 */
	TCCR0A = (1 << WGM01);
     f4c:	92 e0       	ldi	r25, 0x02	; 2
     f4e:	94 bd       	out	0x24, r25	; 36
	TCCR0B = (1 << CS01) | (1 << CS00);
     f50:	83 e0       	ldi	r24, 0x03	; 3
     f52:	85 bd       	out	0x25, r24	; 37

	/* Enable an interrupt on output compare match. 
	 * Note that interrupts have to be enabled globally
	 * before the interrupts will fire.
	 */
	TIMSK0 |= (1 << OCIE0A);
     f54:	ee e6       	ldi	r30, 0x6E	; 110
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	80 81       	ld	r24, Z
     f5a:	82 60       	ori	r24, 0x02	; 2
     f5c:	80 83       	st	Z, r24
	
	/* Make sure the interrupt flag is cleared by writing a 
	 * 1 to it.
	 */
	TIFR0 = (1 << OCF0A);
     f5e:	95 bb       	out	0x15, r25	; 21
     f60:	08 95       	ret

00000f62 <get_current_time>:
	/* Disable interrupts so we can be sure that the interrupt
	 * doesn't fire when we've copied just a couple of bytes
	 * of the value. Interrupts are re-enabled if they were
	 * enabled at the start.
	 */
	uint8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
     f62:	8f b7       	in	r24, 0x3f	; 63
     f64:	28 2f       	mov	r18, r24
     f66:	20 78       	andi	r18, 0x80	; 128
	cli();
     f68:	f8 94       	cli
	return_value = clock_ticks_ms;
     f6a:	60 91 a7 01 	lds	r22, 0x01A7	; 0x8001a7 <clock_ticks_ms>
     f6e:	70 91 a8 01 	lds	r23, 0x01A8	; 0x8001a8 <clock_ticks_ms+0x1>
     f72:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <clock_ticks_ms+0x2>
     f76:	90 91 aa 01 	lds	r25, 0x01AA	; 0x8001aa <clock_ticks_ms+0x3>
	if (interrupts_were_enabled)
     f7a:	22 23       	and	r18, r18
     f7c:	09 f0       	breq	.+2      	; 0xf80 <get_current_time+0x1e>
	{
		sei();
     f7e:	78 94       	sei
	}
	return return_value;
}
     f80:	08 95       	ret

00000f82 <__vector_16>:

ISR(TIMER0_COMPA_vect)
{
     f82:	1f 92       	push	r1
     f84:	0f 92       	push	r0
     f86:	0f b6       	in	r0, 0x3f	; 63
     f88:	0f 92       	push	r0
     f8a:	11 24       	eor	r1, r1
     f8c:	8f 93       	push	r24
     f8e:	9f 93       	push	r25
     f90:	af 93       	push	r26
     f92:	bf 93       	push	r27
	/* Increment our clock tick count */
	clock_ticks_ms++;
     f94:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <clock_ticks_ms>
     f98:	90 91 a8 01 	lds	r25, 0x01A8	; 0x8001a8 <clock_ticks_ms+0x1>
     f9c:	a0 91 a9 01 	lds	r26, 0x01A9	; 0x8001a9 <clock_ticks_ms+0x2>
     fa0:	b0 91 aa 01 	lds	r27, 0x01AA	; 0x8001aa <clock_ticks_ms+0x3>
     fa4:	01 96       	adiw	r24, 0x01	; 1
     fa6:	a1 1d       	adc	r26, r1
     fa8:	b1 1d       	adc	r27, r1
     faa:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <clock_ticks_ms>
     fae:	90 93 a8 01 	sts	0x01A8, r25	; 0x8001a8 <clock_ticks_ms+0x1>
     fb2:	a0 93 a9 01 	sts	0x01A9, r26	; 0x8001a9 <clock_ticks_ms+0x2>
     fb6:	b0 93 aa 01 	sts	0x01AA, r27	; 0x8001aa <clock_ticks_ms+0x3>
}
     fba:	bf 91       	pop	r27
     fbc:	af 91       	pop	r26
     fbe:	9f 91       	pop	r25
     fc0:	8f 91       	pop	r24
     fc2:	0f 90       	pop	r0
     fc4:	0f be       	out	0x3f, r0	; 63
     fc6:	0f 90       	pop	r0
     fc8:	1f 90       	pop	r1
     fca:	18 95       	reti

00000fcc <init_timer1>:

/* Set up timer 1
 */
void init_timer1(void)
{
	TCNT1 = 0;
     fcc:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     fd0:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     fd4:	08 95       	ret

00000fd6 <init_timer2>:

/* Set up timer 2
 */
void init_timer2(void)
{
	TCNT2 = 0;
     fd6:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
     fda:	08 95       	ret

00000fdc <__divmodsi4>:
     fdc:	05 2e       	mov	r0, r21
     fde:	97 fb       	bst	r25, 7
     fe0:	1e f4       	brtc	.+6      	; 0xfe8 <__divmodsi4+0xc>
     fe2:	00 94       	com	r0
     fe4:	0e 94 05 08 	call	0x100a	; 0x100a <__negsi2>
     fe8:	57 fd       	sbrc	r21, 7
     fea:	07 d0       	rcall	.+14     	; 0xffa <__divmodsi4_neg2>
     fec:	0e 94 1c 08 	call	0x1038	; 0x1038 <__udivmodsi4>
     ff0:	07 fc       	sbrc	r0, 7
     ff2:	03 d0       	rcall	.+6      	; 0xffa <__divmodsi4_neg2>
     ff4:	4e f4       	brtc	.+18     	; 0x1008 <__divmodsi4_exit>
     ff6:	0c 94 05 08 	jmp	0x100a	; 0x100a <__negsi2>

00000ffa <__divmodsi4_neg2>:
     ffa:	50 95       	com	r21
     ffc:	40 95       	com	r20
     ffe:	30 95       	com	r19
    1000:	21 95       	neg	r18
    1002:	3f 4f       	sbci	r19, 0xFF	; 255
    1004:	4f 4f       	sbci	r20, 0xFF	; 255
    1006:	5f 4f       	sbci	r21, 0xFF	; 255

00001008 <__divmodsi4_exit>:
    1008:	08 95       	ret

0000100a <__negsi2>:
    100a:	90 95       	com	r25
    100c:	80 95       	com	r24
    100e:	70 95       	com	r23
    1010:	61 95       	neg	r22
    1012:	7f 4f       	sbci	r23, 0xFF	; 255
    1014:	8f 4f       	sbci	r24, 0xFF	; 255
    1016:	9f 4f       	sbci	r25, 0xFF	; 255
    1018:	08 95       	ret

0000101a <__umulhisi3>:
    101a:	a2 9f       	mul	r26, r18
    101c:	b0 01       	movw	r22, r0
    101e:	b3 9f       	mul	r27, r19
    1020:	c0 01       	movw	r24, r0
    1022:	a3 9f       	mul	r26, r19
    1024:	70 0d       	add	r23, r0
    1026:	81 1d       	adc	r24, r1
    1028:	11 24       	eor	r1, r1
    102a:	91 1d       	adc	r25, r1
    102c:	b2 9f       	mul	r27, r18
    102e:	70 0d       	add	r23, r0
    1030:	81 1d       	adc	r24, r1
    1032:	11 24       	eor	r1, r1
    1034:	91 1d       	adc	r25, r1
    1036:	08 95       	ret

00001038 <__udivmodsi4>:
    1038:	a1 e2       	ldi	r26, 0x21	; 33
    103a:	1a 2e       	mov	r1, r26
    103c:	aa 1b       	sub	r26, r26
    103e:	bb 1b       	sub	r27, r27
    1040:	fd 01       	movw	r30, r26
    1042:	0d c0       	rjmp	.+26     	; 0x105e <__udivmodsi4_ep>

00001044 <__udivmodsi4_loop>:
    1044:	aa 1f       	adc	r26, r26
    1046:	bb 1f       	adc	r27, r27
    1048:	ee 1f       	adc	r30, r30
    104a:	ff 1f       	adc	r31, r31
    104c:	a2 17       	cp	r26, r18
    104e:	b3 07       	cpc	r27, r19
    1050:	e4 07       	cpc	r30, r20
    1052:	f5 07       	cpc	r31, r21
    1054:	20 f0       	brcs	.+8      	; 0x105e <__udivmodsi4_ep>
    1056:	a2 1b       	sub	r26, r18
    1058:	b3 0b       	sbc	r27, r19
    105a:	e4 0b       	sbc	r30, r20
    105c:	f5 0b       	sbc	r31, r21

0000105e <__udivmodsi4_ep>:
    105e:	66 1f       	adc	r22, r22
    1060:	77 1f       	adc	r23, r23
    1062:	88 1f       	adc	r24, r24
    1064:	99 1f       	adc	r25, r25
    1066:	1a 94       	dec	r1
    1068:	69 f7       	brne	.-38     	; 0x1044 <__udivmodsi4_loop>
    106a:	60 95       	com	r22
    106c:	70 95       	com	r23
    106e:	80 95       	com	r24
    1070:	90 95       	com	r25
    1072:	9b 01       	movw	r18, r22
    1074:	ac 01       	movw	r20, r24
    1076:	bd 01       	movw	r22, r26
    1078:	cf 01       	movw	r24, r30
    107a:	08 95       	ret

0000107c <fgetc>:
    107c:	cf 93       	push	r28
    107e:	df 93       	push	r29
    1080:	ec 01       	movw	r28, r24
    1082:	2b 81       	ldd	r18, Y+3	; 0x03
    1084:	20 ff       	sbrs	r18, 0
    1086:	33 c0       	rjmp	.+102    	; 0x10ee <fgetc+0x72>
    1088:	26 ff       	sbrs	r18, 6
    108a:	0a c0       	rjmp	.+20     	; 0x10a0 <fgetc+0x24>
    108c:	2f 7b       	andi	r18, 0xBF	; 191
    108e:	2b 83       	std	Y+3, r18	; 0x03
    1090:	8e 81       	ldd	r24, Y+6	; 0x06
    1092:	9f 81       	ldd	r25, Y+7	; 0x07
    1094:	01 96       	adiw	r24, 0x01	; 1
    1096:	9f 83       	std	Y+7, r25	; 0x07
    1098:	8e 83       	std	Y+6, r24	; 0x06
    109a:	8a 81       	ldd	r24, Y+2	; 0x02
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	29 c0       	rjmp	.+82     	; 0x10f2 <fgetc+0x76>
    10a0:	22 ff       	sbrs	r18, 2
    10a2:	0f c0       	rjmp	.+30     	; 0x10c2 <fgetc+0x46>
    10a4:	e8 81       	ld	r30, Y
    10a6:	f9 81       	ldd	r31, Y+1	; 0x01
    10a8:	80 81       	ld	r24, Z
    10aa:	08 2e       	mov	r0, r24
    10ac:	00 0c       	add	r0, r0
    10ae:	99 0b       	sbc	r25, r25
    10b0:	00 97       	sbiw	r24, 0x00	; 0
    10b2:	19 f4       	brne	.+6      	; 0x10ba <fgetc+0x3e>
    10b4:	20 62       	ori	r18, 0x20	; 32
    10b6:	2b 83       	std	Y+3, r18	; 0x03
    10b8:	1a c0       	rjmp	.+52     	; 0x10ee <fgetc+0x72>
    10ba:	31 96       	adiw	r30, 0x01	; 1
    10bc:	f9 83       	std	Y+1, r31	; 0x01
    10be:	e8 83       	st	Y, r30
    10c0:	0e c0       	rjmp	.+28     	; 0x10de <fgetc+0x62>
    10c2:	ea 85       	ldd	r30, Y+10	; 0x0a
    10c4:	fb 85       	ldd	r31, Y+11	; 0x0b
    10c6:	09 95       	icall
    10c8:	97 ff       	sbrs	r25, 7
    10ca:	09 c0       	rjmp	.+18     	; 0x10de <fgetc+0x62>
    10cc:	2b 81       	ldd	r18, Y+3	; 0x03
    10ce:	01 96       	adiw	r24, 0x01	; 1
    10d0:	11 f0       	breq	.+4      	; 0x10d6 <fgetc+0x5a>
    10d2:	80 e2       	ldi	r24, 0x20	; 32
    10d4:	01 c0       	rjmp	.+2      	; 0x10d8 <fgetc+0x5c>
    10d6:	80 e1       	ldi	r24, 0x10	; 16
    10d8:	82 2b       	or	r24, r18
    10da:	8b 83       	std	Y+3, r24	; 0x03
    10dc:	08 c0       	rjmp	.+16     	; 0x10ee <fgetc+0x72>
    10de:	2e 81       	ldd	r18, Y+6	; 0x06
    10e0:	3f 81       	ldd	r19, Y+7	; 0x07
    10e2:	2f 5f       	subi	r18, 0xFF	; 255
    10e4:	3f 4f       	sbci	r19, 0xFF	; 255
    10e6:	3f 83       	std	Y+7, r19	; 0x07
    10e8:	2e 83       	std	Y+6, r18	; 0x06
    10ea:	99 27       	eor	r25, r25
    10ec:	02 c0       	rjmp	.+4      	; 0x10f2 <fgetc+0x76>
    10ee:	8f ef       	ldi	r24, 0xFF	; 255
    10f0:	9f ef       	ldi	r25, 0xFF	; 255
    10f2:	df 91       	pop	r29
    10f4:	cf 91       	pop	r28
    10f6:	08 95       	ret

000010f8 <printf_P>:
    10f8:	a0 e0       	ldi	r26, 0x00	; 0
    10fa:	b0 e0       	ldi	r27, 0x00	; 0
    10fc:	e2 e8       	ldi	r30, 0x82	; 130
    10fe:	f8 e0       	ldi	r31, 0x08	; 8
    1100:	0c 94 41 0b 	jmp	0x1682	; 0x1682 <__prologue_saves__+0x1c>
    1104:	ae 01       	movw	r20, r28
    1106:	49 5f       	subi	r20, 0xF9	; 249
    1108:	5f 4f       	sbci	r21, 0xFF	; 255
    110a:	da 01       	movw	r26, r20
    110c:	6d 91       	ld	r22, X+
    110e:	7d 91       	ld	r23, X+
    1110:	ad 01       	movw	r20, r26
    1112:	03 ec       	ldi	r16, 0xC3	; 195
    1114:	12 e0       	ldi	r17, 0x02	; 2
    1116:	f8 01       	movw	r30, r16
    1118:	82 81       	ldd	r24, Z+2	; 0x02
    111a:	93 81       	ldd	r25, Z+3	; 0x03
    111c:	dc 01       	movw	r26, r24
    111e:	13 96       	adiw	r26, 0x03	; 3
    1120:	2c 91       	ld	r18, X
    1122:	13 97       	sbiw	r26, 0x03	; 3
    1124:	28 60       	ori	r18, 0x08	; 8
    1126:	13 96       	adiw	r26, 0x03	; 3
    1128:	2c 93       	st	X, r18
    112a:	0e 94 a2 08 	call	0x1144	; 0x1144 <vfprintf>
    112e:	d8 01       	movw	r26, r16
    1130:	12 96       	adiw	r26, 0x02	; 2
    1132:	ed 91       	ld	r30, X+
    1134:	fc 91       	ld	r31, X
    1136:	13 97       	sbiw	r26, 0x03	; 3
    1138:	23 81       	ldd	r18, Z+3	; 0x03
    113a:	27 7f       	andi	r18, 0xF7	; 247
    113c:	23 83       	std	Z+3, r18	; 0x03
    113e:	e4 e0       	ldi	r30, 0x04	; 4
    1140:	0c 94 5d 0b 	jmp	0x16ba	; 0x16ba <__epilogue_restores__+0x1c>

00001144 <vfprintf>:
    1144:	ab e0       	ldi	r26, 0x0B	; 11
    1146:	b0 e0       	ldi	r27, 0x00	; 0
    1148:	e8 ea       	ldi	r30, 0xA8	; 168
    114a:	f8 e0       	ldi	r31, 0x08	; 8
    114c:	0c 94 33 0b 	jmp	0x1666	; 0x1666 <__prologue_saves__>
    1150:	6c 01       	movw	r12, r24
    1152:	7b 01       	movw	r14, r22
    1154:	8a 01       	movw	r16, r20
    1156:	fc 01       	movw	r30, r24
    1158:	17 82       	std	Z+7, r1	; 0x07
    115a:	16 82       	std	Z+6, r1	; 0x06
    115c:	83 81       	ldd	r24, Z+3	; 0x03
    115e:	81 ff       	sbrs	r24, 1
    1160:	cc c1       	rjmp	.+920    	; 0x14fa <vfprintf+0x3b6>
    1162:	ce 01       	movw	r24, r28
    1164:	01 96       	adiw	r24, 0x01	; 1
    1166:	3c 01       	movw	r6, r24
    1168:	f6 01       	movw	r30, r12
    116a:	93 81       	ldd	r25, Z+3	; 0x03
    116c:	f7 01       	movw	r30, r14
    116e:	93 fd       	sbrc	r25, 3
    1170:	85 91       	lpm	r24, Z+
    1172:	93 ff       	sbrs	r25, 3
    1174:	81 91       	ld	r24, Z+
    1176:	7f 01       	movw	r14, r30
    1178:	88 23       	and	r24, r24
    117a:	09 f4       	brne	.+2      	; 0x117e <vfprintf+0x3a>
    117c:	ba c1       	rjmp	.+884    	; 0x14f2 <vfprintf+0x3ae>
    117e:	85 32       	cpi	r24, 0x25	; 37
    1180:	39 f4       	brne	.+14     	; 0x1190 <vfprintf+0x4c>
    1182:	93 fd       	sbrc	r25, 3
    1184:	85 91       	lpm	r24, Z+
    1186:	93 ff       	sbrs	r25, 3
    1188:	81 91       	ld	r24, Z+
    118a:	7f 01       	movw	r14, r30
    118c:	85 32       	cpi	r24, 0x25	; 37
    118e:	29 f4       	brne	.+10     	; 0x119a <vfprintf+0x56>
    1190:	b6 01       	movw	r22, r12
    1192:	90 e0       	ldi	r25, 0x00	; 0
    1194:	0e 94 99 0a 	call	0x1532	; 0x1532 <fputc>
    1198:	e7 cf       	rjmp	.-50     	; 0x1168 <vfprintf+0x24>
    119a:	91 2c       	mov	r9, r1
    119c:	21 2c       	mov	r2, r1
    119e:	31 2c       	mov	r3, r1
    11a0:	ff e1       	ldi	r31, 0x1F	; 31
    11a2:	f3 15       	cp	r31, r3
    11a4:	d8 f0       	brcs	.+54     	; 0x11dc <vfprintf+0x98>
    11a6:	8b 32       	cpi	r24, 0x2B	; 43
    11a8:	79 f0       	breq	.+30     	; 0x11c8 <vfprintf+0x84>
    11aa:	38 f4       	brcc	.+14     	; 0x11ba <vfprintf+0x76>
    11ac:	80 32       	cpi	r24, 0x20	; 32
    11ae:	79 f0       	breq	.+30     	; 0x11ce <vfprintf+0x8a>
    11b0:	83 32       	cpi	r24, 0x23	; 35
    11b2:	a1 f4       	brne	.+40     	; 0x11dc <vfprintf+0x98>
    11b4:	23 2d       	mov	r18, r3
    11b6:	20 61       	ori	r18, 0x10	; 16
    11b8:	1d c0       	rjmp	.+58     	; 0x11f4 <vfprintf+0xb0>
    11ba:	8d 32       	cpi	r24, 0x2D	; 45
    11bc:	61 f0       	breq	.+24     	; 0x11d6 <vfprintf+0x92>
    11be:	80 33       	cpi	r24, 0x30	; 48
    11c0:	69 f4       	brne	.+26     	; 0x11dc <vfprintf+0x98>
    11c2:	23 2d       	mov	r18, r3
    11c4:	21 60       	ori	r18, 0x01	; 1
    11c6:	16 c0       	rjmp	.+44     	; 0x11f4 <vfprintf+0xb0>
    11c8:	83 2d       	mov	r24, r3
    11ca:	82 60       	ori	r24, 0x02	; 2
    11cc:	38 2e       	mov	r3, r24
    11ce:	e3 2d       	mov	r30, r3
    11d0:	e4 60       	ori	r30, 0x04	; 4
    11d2:	3e 2e       	mov	r3, r30
    11d4:	2a c0       	rjmp	.+84     	; 0x122a <vfprintf+0xe6>
    11d6:	f3 2d       	mov	r31, r3
    11d8:	f8 60       	ori	r31, 0x08	; 8
    11da:	1d c0       	rjmp	.+58     	; 0x1216 <vfprintf+0xd2>
    11dc:	37 fc       	sbrc	r3, 7
    11de:	2d c0       	rjmp	.+90     	; 0x123a <vfprintf+0xf6>
    11e0:	20 ed       	ldi	r18, 0xD0	; 208
    11e2:	28 0f       	add	r18, r24
    11e4:	2a 30       	cpi	r18, 0x0A	; 10
    11e6:	40 f0       	brcs	.+16     	; 0x11f8 <vfprintf+0xb4>
    11e8:	8e 32       	cpi	r24, 0x2E	; 46
    11ea:	b9 f4       	brne	.+46     	; 0x121a <vfprintf+0xd6>
    11ec:	36 fc       	sbrc	r3, 6
    11ee:	81 c1       	rjmp	.+770    	; 0x14f2 <vfprintf+0x3ae>
    11f0:	23 2d       	mov	r18, r3
    11f2:	20 64       	ori	r18, 0x40	; 64
    11f4:	32 2e       	mov	r3, r18
    11f6:	19 c0       	rjmp	.+50     	; 0x122a <vfprintf+0xe6>
    11f8:	36 fe       	sbrs	r3, 6
    11fa:	06 c0       	rjmp	.+12     	; 0x1208 <vfprintf+0xc4>
    11fc:	8a e0       	ldi	r24, 0x0A	; 10
    11fe:	98 9e       	mul	r9, r24
    1200:	20 0d       	add	r18, r0
    1202:	11 24       	eor	r1, r1
    1204:	92 2e       	mov	r9, r18
    1206:	11 c0       	rjmp	.+34     	; 0x122a <vfprintf+0xe6>
    1208:	ea e0       	ldi	r30, 0x0A	; 10
    120a:	2e 9e       	mul	r2, r30
    120c:	20 0d       	add	r18, r0
    120e:	11 24       	eor	r1, r1
    1210:	22 2e       	mov	r2, r18
    1212:	f3 2d       	mov	r31, r3
    1214:	f0 62       	ori	r31, 0x20	; 32
    1216:	3f 2e       	mov	r3, r31
    1218:	08 c0       	rjmp	.+16     	; 0x122a <vfprintf+0xe6>
    121a:	8c 36       	cpi	r24, 0x6C	; 108
    121c:	21 f4       	brne	.+8      	; 0x1226 <vfprintf+0xe2>
    121e:	83 2d       	mov	r24, r3
    1220:	80 68       	ori	r24, 0x80	; 128
    1222:	38 2e       	mov	r3, r24
    1224:	02 c0       	rjmp	.+4      	; 0x122a <vfprintf+0xe6>
    1226:	88 36       	cpi	r24, 0x68	; 104
    1228:	41 f4       	brne	.+16     	; 0x123a <vfprintf+0xf6>
    122a:	f7 01       	movw	r30, r14
    122c:	93 fd       	sbrc	r25, 3
    122e:	85 91       	lpm	r24, Z+
    1230:	93 ff       	sbrs	r25, 3
    1232:	81 91       	ld	r24, Z+
    1234:	7f 01       	movw	r14, r30
    1236:	81 11       	cpse	r24, r1
    1238:	b3 cf       	rjmp	.-154    	; 0x11a0 <vfprintf+0x5c>
    123a:	98 2f       	mov	r25, r24
    123c:	9f 7d       	andi	r25, 0xDF	; 223
    123e:	95 54       	subi	r25, 0x45	; 69
    1240:	93 30       	cpi	r25, 0x03	; 3
    1242:	28 f4       	brcc	.+10     	; 0x124e <vfprintf+0x10a>
    1244:	0c 5f       	subi	r16, 0xFC	; 252
    1246:	1f 4f       	sbci	r17, 0xFF	; 255
    1248:	9f e3       	ldi	r25, 0x3F	; 63
    124a:	99 83       	std	Y+1, r25	; 0x01
    124c:	0d c0       	rjmp	.+26     	; 0x1268 <vfprintf+0x124>
    124e:	83 36       	cpi	r24, 0x63	; 99
    1250:	31 f0       	breq	.+12     	; 0x125e <vfprintf+0x11a>
    1252:	83 37       	cpi	r24, 0x73	; 115
    1254:	71 f0       	breq	.+28     	; 0x1272 <vfprintf+0x12e>
    1256:	83 35       	cpi	r24, 0x53	; 83
    1258:	09 f0       	breq	.+2      	; 0x125c <vfprintf+0x118>
    125a:	59 c0       	rjmp	.+178    	; 0x130e <vfprintf+0x1ca>
    125c:	21 c0       	rjmp	.+66     	; 0x12a0 <vfprintf+0x15c>
    125e:	f8 01       	movw	r30, r16
    1260:	80 81       	ld	r24, Z
    1262:	89 83       	std	Y+1, r24	; 0x01
    1264:	0e 5f       	subi	r16, 0xFE	; 254
    1266:	1f 4f       	sbci	r17, 0xFF	; 255
    1268:	88 24       	eor	r8, r8
    126a:	83 94       	inc	r8
    126c:	91 2c       	mov	r9, r1
    126e:	53 01       	movw	r10, r6
    1270:	13 c0       	rjmp	.+38     	; 0x1298 <vfprintf+0x154>
    1272:	28 01       	movw	r4, r16
    1274:	f2 e0       	ldi	r31, 0x02	; 2
    1276:	4f 0e       	add	r4, r31
    1278:	51 1c       	adc	r5, r1
    127a:	f8 01       	movw	r30, r16
    127c:	a0 80       	ld	r10, Z
    127e:	b1 80       	ldd	r11, Z+1	; 0x01
    1280:	36 fe       	sbrs	r3, 6
    1282:	03 c0       	rjmp	.+6      	; 0x128a <vfprintf+0x146>
    1284:	69 2d       	mov	r22, r9
    1286:	70 e0       	ldi	r23, 0x00	; 0
    1288:	02 c0       	rjmp	.+4      	; 0x128e <vfprintf+0x14a>
    128a:	6f ef       	ldi	r22, 0xFF	; 255
    128c:	7f ef       	ldi	r23, 0xFF	; 255
    128e:	c5 01       	movw	r24, r10
    1290:	0e 94 8e 0a 	call	0x151c	; 0x151c <strnlen>
    1294:	4c 01       	movw	r8, r24
    1296:	82 01       	movw	r16, r4
    1298:	f3 2d       	mov	r31, r3
    129a:	ff 77       	andi	r31, 0x7F	; 127
    129c:	3f 2e       	mov	r3, r31
    129e:	16 c0       	rjmp	.+44     	; 0x12cc <vfprintf+0x188>
    12a0:	28 01       	movw	r4, r16
    12a2:	22 e0       	ldi	r18, 0x02	; 2
    12a4:	42 0e       	add	r4, r18
    12a6:	51 1c       	adc	r5, r1
    12a8:	f8 01       	movw	r30, r16
    12aa:	a0 80       	ld	r10, Z
    12ac:	b1 80       	ldd	r11, Z+1	; 0x01
    12ae:	36 fe       	sbrs	r3, 6
    12b0:	03 c0       	rjmp	.+6      	; 0x12b8 <vfprintf+0x174>
    12b2:	69 2d       	mov	r22, r9
    12b4:	70 e0       	ldi	r23, 0x00	; 0
    12b6:	02 c0       	rjmp	.+4      	; 0x12bc <vfprintf+0x178>
    12b8:	6f ef       	ldi	r22, 0xFF	; 255
    12ba:	7f ef       	ldi	r23, 0xFF	; 255
    12bc:	c5 01       	movw	r24, r10
    12be:	0e 94 83 0a 	call	0x1506	; 0x1506 <strnlen_P>
    12c2:	4c 01       	movw	r8, r24
    12c4:	f3 2d       	mov	r31, r3
    12c6:	f0 68       	ori	r31, 0x80	; 128
    12c8:	3f 2e       	mov	r3, r31
    12ca:	82 01       	movw	r16, r4
    12cc:	33 fc       	sbrc	r3, 3
    12ce:	1b c0       	rjmp	.+54     	; 0x1306 <vfprintf+0x1c2>
    12d0:	82 2d       	mov	r24, r2
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	88 16       	cp	r8, r24
    12d6:	99 06       	cpc	r9, r25
    12d8:	b0 f4       	brcc	.+44     	; 0x1306 <vfprintf+0x1c2>
    12da:	b6 01       	movw	r22, r12
    12dc:	80 e2       	ldi	r24, 0x20	; 32
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	0e 94 99 0a 	call	0x1532	; 0x1532 <fputc>
    12e4:	2a 94       	dec	r2
    12e6:	f4 cf       	rjmp	.-24     	; 0x12d0 <vfprintf+0x18c>
    12e8:	f5 01       	movw	r30, r10
    12ea:	37 fc       	sbrc	r3, 7
    12ec:	85 91       	lpm	r24, Z+
    12ee:	37 fe       	sbrs	r3, 7
    12f0:	81 91       	ld	r24, Z+
    12f2:	5f 01       	movw	r10, r30
    12f4:	b6 01       	movw	r22, r12
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	0e 94 99 0a 	call	0x1532	; 0x1532 <fputc>
    12fc:	21 10       	cpse	r2, r1
    12fe:	2a 94       	dec	r2
    1300:	21 e0       	ldi	r18, 0x01	; 1
    1302:	82 1a       	sub	r8, r18
    1304:	91 08       	sbc	r9, r1
    1306:	81 14       	cp	r8, r1
    1308:	91 04       	cpc	r9, r1
    130a:	71 f7       	brne	.-36     	; 0x12e8 <vfprintf+0x1a4>
    130c:	e8 c0       	rjmp	.+464    	; 0x14de <vfprintf+0x39a>
    130e:	84 36       	cpi	r24, 0x64	; 100
    1310:	11 f0       	breq	.+4      	; 0x1316 <vfprintf+0x1d2>
    1312:	89 36       	cpi	r24, 0x69	; 105
    1314:	41 f5       	brne	.+80     	; 0x1366 <vfprintf+0x222>
    1316:	f8 01       	movw	r30, r16
    1318:	37 fe       	sbrs	r3, 7
    131a:	07 c0       	rjmp	.+14     	; 0x132a <vfprintf+0x1e6>
    131c:	60 81       	ld	r22, Z
    131e:	71 81       	ldd	r23, Z+1	; 0x01
    1320:	82 81       	ldd	r24, Z+2	; 0x02
    1322:	93 81       	ldd	r25, Z+3	; 0x03
    1324:	0c 5f       	subi	r16, 0xFC	; 252
    1326:	1f 4f       	sbci	r17, 0xFF	; 255
    1328:	08 c0       	rjmp	.+16     	; 0x133a <vfprintf+0x1f6>
    132a:	60 81       	ld	r22, Z
    132c:	71 81       	ldd	r23, Z+1	; 0x01
    132e:	07 2e       	mov	r0, r23
    1330:	00 0c       	add	r0, r0
    1332:	88 0b       	sbc	r24, r24
    1334:	99 0b       	sbc	r25, r25
    1336:	0e 5f       	subi	r16, 0xFE	; 254
    1338:	1f 4f       	sbci	r17, 0xFF	; 255
    133a:	f3 2d       	mov	r31, r3
    133c:	ff 76       	andi	r31, 0x6F	; 111
    133e:	3f 2e       	mov	r3, r31
    1340:	97 ff       	sbrs	r25, 7
    1342:	09 c0       	rjmp	.+18     	; 0x1356 <vfprintf+0x212>
    1344:	90 95       	com	r25
    1346:	80 95       	com	r24
    1348:	70 95       	com	r23
    134a:	61 95       	neg	r22
    134c:	7f 4f       	sbci	r23, 0xFF	; 255
    134e:	8f 4f       	sbci	r24, 0xFF	; 255
    1350:	9f 4f       	sbci	r25, 0xFF	; 255
    1352:	f0 68       	ori	r31, 0x80	; 128
    1354:	3f 2e       	mov	r3, r31
    1356:	2a e0       	ldi	r18, 0x0A	; 10
    1358:	30 e0       	ldi	r19, 0x00	; 0
    135a:	a3 01       	movw	r20, r6
    135c:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <__ultoa_invert>
    1360:	88 2e       	mov	r8, r24
    1362:	86 18       	sub	r8, r6
    1364:	45 c0       	rjmp	.+138    	; 0x13f0 <vfprintf+0x2ac>
    1366:	85 37       	cpi	r24, 0x75	; 117
    1368:	31 f4       	brne	.+12     	; 0x1376 <vfprintf+0x232>
    136a:	23 2d       	mov	r18, r3
    136c:	2f 7e       	andi	r18, 0xEF	; 239
    136e:	b2 2e       	mov	r11, r18
    1370:	2a e0       	ldi	r18, 0x0A	; 10
    1372:	30 e0       	ldi	r19, 0x00	; 0
    1374:	25 c0       	rjmp	.+74     	; 0x13c0 <vfprintf+0x27c>
    1376:	93 2d       	mov	r25, r3
    1378:	99 7f       	andi	r25, 0xF9	; 249
    137a:	b9 2e       	mov	r11, r25
    137c:	8f 36       	cpi	r24, 0x6F	; 111
    137e:	c1 f0       	breq	.+48     	; 0x13b0 <vfprintf+0x26c>
    1380:	18 f4       	brcc	.+6      	; 0x1388 <vfprintf+0x244>
    1382:	88 35       	cpi	r24, 0x58	; 88
    1384:	79 f0       	breq	.+30     	; 0x13a4 <vfprintf+0x260>
    1386:	b5 c0       	rjmp	.+362    	; 0x14f2 <vfprintf+0x3ae>
    1388:	80 37       	cpi	r24, 0x70	; 112
    138a:	19 f0       	breq	.+6      	; 0x1392 <vfprintf+0x24e>
    138c:	88 37       	cpi	r24, 0x78	; 120
    138e:	21 f0       	breq	.+8      	; 0x1398 <vfprintf+0x254>
    1390:	b0 c0       	rjmp	.+352    	; 0x14f2 <vfprintf+0x3ae>
    1392:	e9 2f       	mov	r30, r25
    1394:	e0 61       	ori	r30, 0x10	; 16
    1396:	be 2e       	mov	r11, r30
    1398:	b4 fe       	sbrs	r11, 4
    139a:	0d c0       	rjmp	.+26     	; 0x13b6 <vfprintf+0x272>
    139c:	fb 2d       	mov	r31, r11
    139e:	f4 60       	ori	r31, 0x04	; 4
    13a0:	bf 2e       	mov	r11, r31
    13a2:	09 c0       	rjmp	.+18     	; 0x13b6 <vfprintf+0x272>
    13a4:	34 fe       	sbrs	r3, 4
    13a6:	0a c0       	rjmp	.+20     	; 0x13bc <vfprintf+0x278>
    13a8:	29 2f       	mov	r18, r25
    13aa:	26 60       	ori	r18, 0x06	; 6
    13ac:	b2 2e       	mov	r11, r18
    13ae:	06 c0       	rjmp	.+12     	; 0x13bc <vfprintf+0x278>
    13b0:	28 e0       	ldi	r18, 0x08	; 8
    13b2:	30 e0       	ldi	r19, 0x00	; 0
    13b4:	05 c0       	rjmp	.+10     	; 0x13c0 <vfprintf+0x27c>
    13b6:	20 e1       	ldi	r18, 0x10	; 16
    13b8:	30 e0       	ldi	r19, 0x00	; 0
    13ba:	02 c0       	rjmp	.+4      	; 0x13c0 <vfprintf+0x27c>
    13bc:	20 e1       	ldi	r18, 0x10	; 16
    13be:	32 e0       	ldi	r19, 0x02	; 2
    13c0:	f8 01       	movw	r30, r16
    13c2:	b7 fe       	sbrs	r11, 7
    13c4:	07 c0       	rjmp	.+14     	; 0x13d4 <vfprintf+0x290>
    13c6:	60 81       	ld	r22, Z
    13c8:	71 81       	ldd	r23, Z+1	; 0x01
    13ca:	82 81       	ldd	r24, Z+2	; 0x02
    13cc:	93 81       	ldd	r25, Z+3	; 0x03
    13ce:	0c 5f       	subi	r16, 0xFC	; 252
    13d0:	1f 4f       	sbci	r17, 0xFF	; 255
    13d2:	06 c0       	rjmp	.+12     	; 0x13e0 <vfprintf+0x29c>
    13d4:	60 81       	ld	r22, Z
    13d6:	71 81       	ldd	r23, Z+1	; 0x01
    13d8:	80 e0       	ldi	r24, 0x00	; 0
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	0e 5f       	subi	r16, 0xFE	; 254
    13de:	1f 4f       	sbci	r17, 0xFF	; 255
    13e0:	a3 01       	movw	r20, r6
    13e2:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <__ultoa_invert>
    13e6:	88 2e       	mov	r8, r24
    13e8:	86 18       	sub	r8, r6
    13ea:	fb 2d       	mov	r31, r11
    13ec:	ff 77       	andi	r31, 0x7F	; 127
    13ee:	3f 2e       	mov	r3, r31
    13f0:	36 fe       	sbrs	r3, 6
    13f2:	0d c0       	rjmp	.+26     	; 0x140e <vfprintf+0x2ca>
    13f4:	23 2d       	mov	r18, r3
    13f6:	2e 7f       	andi	r18, 0xFE	; 254
    13f8:	a2 2e       	mov	r10, r18
    13fa:	89 14       	cp	r8, r9
    13fc:	58 f4       	brcc	.+22     	; 0x1414 <vfprintf+0x2d0>
    13fe:	34 fe       	sbrs	r3, 4
    1400:	0b c0       	rjmp	.+22     	; 0x1418 <vfprintf+0x2d4>
    1402:	32 fc       	sbrc	r3, 2
    1404:	09 c0       	rjmp	.+18     	; 0x1418 <vfprintf+0x2d4>
    1406:	83 2d       	mov	r24, r3
    1408:	8e 7e       	andi	r24, 0xEE	; 238
    140a:	a8 2e       	mov	r10, r24
    140c:	05 c0       	rjmp	.+10     	; 0x1418 <vfprintf+0x2d4>
    140e:	b8 2c       	mov	r11, r8
    1410:	a3 2c       	mov	r10, r3
    1412:	03 c0       	rjmp	.+6      	; 0x141a <vfprintf+0x2d6>
    1414:	b8 2c       	mov	r11, r8
    1416:	01 c0       	rjmp	.+2      	; 0x141a <vfprintf+0x2d6>
    1418:	b9 2c       	mov	r11, r9
    141a:	a4 fe       	sbrs	r10, 4
    141c:	0f c0       	rjmp	.+30     	; 0x143c <vfprintf+0x2f8>
    141e:	fe 01       	movw	r30, r28
    1420:	e8 0d       	add	r30, r8
    1422:	f1 1d       	adc	r31, r1
    1424:	80 81       	ld	r24, Z
    1426:	80 33       	cpi	r24, 0x30	; 48
    1428:	21 f4       	brne	.+8      	; 0x1432 <vfprintf+0x2ee>
    142a:	9a 2d       	mov	r25, r10
    142c:	99 7e       	andi	r25, 0xE9	; 233
    142e:	a9 2e       	mov	r10, r25
    1430:	09 c0       	rjmp	.+18     	; 0x1444 <vfprintf+0x300>
    1432:	a2 fe       	sbrs	r10, 2
    1434:	06 c0       	rjmp	.+12     	; 0x1442 <vfprintf+0x2fe>
    1436:	b3 94       	inc	r11
    1438:	b3 94       	inc	r11
    143a:	04 c0       	rjmp	.+8      	; 0x1444 <vfprintf+0x300>
    143c:	8a 2d       	mov	r24, r10
    143e:	86 78       	andi	r24, 0x86	; 134
    1440:	09 f0       	breq	.+2      	; 0x1444 <vfprintf+0x300>
    1442:	b3 94       	inc	r11
    1444:	a3 fc       	sbrc	r10, 3
    1446:	11 c0       	rjmp	.+34     	; 0x146a <vfprintf+0x326>
    1448:	a0 fe       	sbrs	r10, 0
    144a:	06 c0       	rjmp	.+12     	; 0x1458 <vfprintf+0x314>
    144c:	b2 14       	cp	r11, r2
    144e:	88 f4       	brcc	.+34     	; 0x1472 <vfprintf+0x32e>
    1450:	28 0c       	add	r2, r8
    1452:	92 2c       	mov	r9, r2
    1454:	9b 18       	sub	r9, r11
    1456:	0e c0       	rjmp	.+28     	; 0x1474 <vfprintf+0x330>
    1458:	b2 14       	cp	r11, r2
    145a:	60 f4       	brcc	.+24     	; 0x1474 <vfprintf+0x330>
    145c:	b6 01       	movw	r22, r12
    145e:	80 e2       	ldi	r24, 0x20	; 32
    1460:	90 e0       	ldi	r25, 0x00	; 0
    1462:	0e 94 99 0a 	call	0x1532	; 0x1532 <fputc>
    1466:	b3 94       	inc	r11
    1468:	f7 cf       	rjmp	.-18     	; 0x1458 <vfprintf+0x314>
    146a:	b2 14       	cp	r11, r2
    146c:	18 f4       	brcc	.+6      	; 0x1474 <vfprintf+0x330>
    146e:	2b 18       	sub	r2, r11
    1470:	02 c0       	rjmp	.+4      	; 0x1476 <vfprintf+0x332>
    1472:	98 2c       	mov	r9, r8
    1474:	21 2c       	mov	r2, r1
    1476:	a4 fe       	sbrs	r10, 4
    1478:	10 c0       	rjmp	.+32     	; 0x149a <vfprintf+0x356>
    147a:	b6 01       	movw	r22, r12
    147c:	80 e3       	ldi	r24, 0x30	; 48
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	0e 94 99 0a 	call	0x1532	; 0x1532 <fputc>
    1484:	a2 fe       	sbrs	r10, 2
    1486:	17 c0       	rjmp	.+46     	; 0x14b6 <vfprintf+0x372>
    1488:	a1 fc       	sbrc	r10, 1
    148a:	03 c0       	rjmp	.+6      	; 0x1492 <vfprintf+0x34e>
    148c:	88 e7       	ldi	r24, 0x78	; 120
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	02 c0       	rjmp	.+4      	; 0x1496 <vfprintf+0x352>
    1492:	88 e5       	ldi	r24, 0x58	; 88
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	b6 01       	movw	r22, r12
    1498:	0c c0       	rjmp	.+24     	; 0x14b2 <vfprintf+0x36e>
    149a:	8a 2d       	mov	r24, r10
    149c:	86 78       	andi	r24, 0x86	; 134
    149e:	59 f0       	breq	.+22     	; 0x14b6 <vfprintf+0x372>
    14a0:	a1 fe       	sbrs	r10, 1
    14a2:	02 c0       	rjmp	.+4      	; 0x14a8 <vfprintf+0x364>
    14a4:	8b e2       	ldi	r24, 0x2B	; 43
    14a6:	01 c0       	rjmp	.+2      	; 0x14aa <vfprintf+0x366>
    14a8:	80 e2       	ldi	r24, 0x20	; 32
    14aa:	a7 fc       	sbrc	r10, 7
    14ac:	8d e2       	ldi	r24, 0x2D	; 45
    14ae:	b6 01       	movw	r22, r12
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	0e 94 99 0a 	call	0x1532	; 0x1532 <fputc>
    14b6:	89 14       	cp	r8, r9
    14b8:	38 f4       	brcc	.+14     	; 0x14c8 <vfprintf+0x384>
    14ba:	b6 01       	movw	r22, r12
    14bc:	80 e3       	ldi	r24, 0x30	; 48
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	0e 94 99 0a 	call	0x1532	; 0x1532 <fputc>
    14c4:	9a 94       	dec	r9
    14c6:	f7 cf       	rjmp	.-18     	; 0x14b6 <vfprintf+0x372>
    14c8:	8a 94       	dec	r8
    14ca:	f3 01       	movw	r30, r6
    14cc:	e8 0d       	add	r30, r8
    14ce:	f1 1d       	adc	r31, r1
    14d0:	80 81       	ld	r24, Z
    14d2:	b6 01       	movw	r22, r12
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	0e 94 99 0a 	call	0x1532	; 0x1532 <fputc>
    14da:	81 10       	cpse	r8, r1
    14dc:	f5 cf       	rjmp	.-22     	; 0x14c8 <vfprintf+0x384>
    14de:	22 20       	and	r2, r2
    14e0:	09 f4       	brne	.+2      	; 0x14e4 <vfprintf+0x3a0>
    14e2:	42 ce       	rjmp	.-892    	; 0x1168 <vfprintf+0x24>
    14e4:	b6 01       	movw	r22, r12
    14e6:	80 e2       	ldi	r24, 0x20	; 32
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	0e 94 99 0a 	call	0x1532	; 0x1532 <fputc>
    14ee:	2a 94       	dec	r2
    14f0:	f6 cf       	rjmp	.-20     	; 0x14de <vfprintf+0x39a>
    14f2:	f6 01       	movw	r30, r12
    14f4:	86 81       	ldd	r24, Z+6	; 0x06
    14f6:	97 81       	ldd	r25, Z+7	; 0x07
    14f8:	02 c0       	rjmp	.+4      	; 0x14fe <vfprintf+0x3ba>
    14fa:	8f ef       	ldi	r24, 0xFF	; 255
    14fc:	9f ef       	ldi	r25, 0xFF	; 255
    14fe:	2b 96       	adiw	r28, 0x0b	; 11
    1500:	e2 e1       	ldi	r30, 0x12	; 18
    1502:	0c 94 4f 0b 	jmp	0x169e	; 0x169e <__epilogue_restores__>

00001506 <strnlen_P>:
    1506:	fc 01       	movw	r30, r24
    1508:	05 90       	lpm	r0, Z+
    150a:	61 50       	subi	r22, 0x01	; 1
    150c:	70 40       	sbci	r23, 0x00	; 0
    150e:	01 10       	cpse	r0, r1
    1510:	d8 f7       	brcc	.-10     	; 0x1508 <strnlen_P+0x2>
    1512:	80 95       	com	r24
    1514:	90 95       	com	r25
    1516:	8e 0f       	add	r24, r30
    1518:	9f 1f       	adc	r25, r31
    151a:	08 95       	ret

0000151c <strnlen>:
    151c:	fc 01       	movw	r30, r24
    151e:	61 50       	subi	r22, 0x01	; 1
    1520:	70 40       	sbci	r23, 0x00	; 0
    1522:	01 90       	ld	r0, Z+
    1524:	01 10       	cpse	r0, r1
    1526:	d8 f7       	brcc	.-10     	; 0x151e <strnlen+0x2>
    1528:	80 95       	com	r24
    152a:	90 95       	com	r25
    152c:	8e 0f       	add	r24, r30
    152e:	9f 1f       	adc	r25, r31
    1530:	08 95       	ret

00001532 <fputc>:
    1532:	0f 93       	push	r16
    1534:	1f 93       	push	r17
    1536:	cf 93       	push	r28
    1538:	df 93       	push	r29
    153a:	fb 01       	movw	r30, r22
    153c:	23 81       	ldd	r18, Z+3	; 0x03
    153e:	21 fd       	sbrc	r18, 1
    1540:	03 c0       	rjmp	.+6      	; 0x1548 <fputc+0x16>
    1542:	8f ef       	ldi	r24, 0xFF	; 255
    1544:	9f ef       	ldi	r25, 0xFF	; 255
    1546:	2c c0       	rjmp	.+88     	; 0x15a0 <fputc+0x6e>
    1548:	22 ff       	sbrs	r18, 2
    154a:	16 c0       	rjmp	.+44     	; 0x1578 <fputc+0x46>
    154c:	46 81       	ldd	r20, Z+6	; 0x06
    154e:	57 81       	ldd	r21, Z+7	; 0x07
    1550:	24 81       	ldd	r18, Z+4	; 0x04
    1552:	35 81       	ldd	r19, Z+5	; 0x05
    1554:	42 17       	cp	r20, r18
    1556:	53 07       	cpc	r21, r19
    1558:	44 f4       	brge	.+16     	; 0x156a <fputc+0x38>
    155a:	a0 81       	ld	r26, Z
    155c:	b1 81       	ldd	r27, Z+1	; 0x01
    155e:	9d 01       	movw	r18, r26
    1560:	2f 5f       	subi	r18, 0xFF	; 255
    1562:	3f 4f       	sbci	r19, 0xFF	; 255
    1564:	31 83       	std	Z+1, r19	; 0x01
    1566:	20 83       	st	Z, r18
    1568:	8c 93       	st	X, r24
    156a:	26 81       	ldd	r18, Z+6	; 0x06
    156c:	37 81       	ldd	r19, Z+7	; 0x07
    156e:	2f 5f       	subi	r18, 0xFF	; 255
    1570:	3f 4f       	sbci	r19, 0xFF	; 255
    1572:	37 83       	std	Z+7, r19	; 0x07
    1574:	26 83       	std	Z+6, r18	; 0x06
    1576:	14 c0       	rjmp	.+40     	; 0x15a0 <fputc+0x6e>
    1578:	8b 01       	movw	r16, r22
    157a:	ec 01       	movw	r28, r24
    157c:	fb 01       	movw	r30, r22
    157e:	00 84       	ldd	r0, Z+8	; 0x08
    1580:	f1 85       	ldd	r31, Z+9	; 0x09
    1582:	e0 2d       	mov	r30, r0
    1584:	09 95       	icall
    1586:	89 2b       	or	r24, r25
    1588:	e1 f6       	brne	.-72     	; 0x1542 <fputc+0x10>
    158a:	d8 01       	movw	r26, r16
    158c:	16 96       	adiw	r26, 0x06	; 6
    158e:	8d 91       	ld	r24, X+
    1590:	9c 91       	ld	r25, X
    1592:	17 97       	sbiw	r26, 0x07	; 7
    1594:	01 96       	adiw	r24, 0x01	; 1
    1596:	17 96       	adiw	r26, 0x07	; 7
    1598:	9c 93       	st	X, r25
    159a:	8e 93       	st	-X, r24
    159c:	16 97       	sbiw	r26, 0x06	; 6
    159e:	ce 01       	movw	r24, r28
    15a0:	df 91       	pop	r29
    15a2:	cf 91       	pop	r28
    15a4:	1f 91       	pop	r17
    15a6:	0f 91       	pop	r16
    15a8:	08 95       	ret

000015aa <__ultoa_invert>:
    15aa:	fa 01       	movw	r30, r20
    15ac:	aa 27       	eor	r26, r26
    15ae:	28 30       	cpi	r18, 0x08	; 8
    15b0:	51 f1       	breq	.+84     	; 0x1606 <__ultoa_invert+0x5c>
    15b2:	20 31       	cpi	r18, 0x10	; 16
    15b4:	81 f1       	breq	.+96     	; 0x1616 <__ultoa_invert+0x6c>
    15b6:	e8 94       	clt
    15b8:	6f 93       	push	r22
    15ba:	6e 7f       	andi	r22, 0xFE	; 254
    15bc:	6e 5f       	subi	r22, 0xFE	; 254
    15be:	7f 4f       	sbci	r23, 0xFF	; 255
    15c0:	8f 4f       	sbci	r24, 0xFF	; 255
    15c2:	9f 4f       	sbci	r25, 0xFF	; 255
    15c4:	af 4f       	sbci	r26, 0xFF	; 255
    15c6:	b1 e0       	ldi	r27, 0x01	; 1
    15c8:	3e d0       	rcall	.+124    	; 0x1646 <__ultoa_invert+0x9c>
    15ca:	b4 e0       	ldi	r27, 0x04	; 4
    15cc:	3c d0       	rcall	.+120    	; 0x1646 <__ultoa_invert+0x9c>
    15ce:	67 0f       	add	r22, r23
    15d0:	78 1f       	adc	r23, r24
    15d2:	89 1f       	adc	r24, r25
    15d4:	9a 1f       	adc	r25, r26
    15d6:	a1 1d       	adc	r26, r1
    15d8:	68 0f       	add	r22, r24
    15da:	79 1f       	adc	r23, r25
    15dc:	8a 1f       	adc	r24, r26
    15de:	91 1d       	adc	r25, r1
    15e0:	a1 1d       	adc	r26, r1
    15e2:	6a 0f       	add	r22, r26
    15e4:	71 1d       	adc	r23, r1
    15e6:	81 1d       	adc	r24, r1
    15e8:	91 1d       	adc	r25, r1
    15ea:	a1 1d       	adc	r26, r1
    15ec:	20 d0       	rcall	.+64     	; 0x162e <__ultoa_invert+0x84>
    15ee:	09 f4       	brne	.+2      	; 0x15f2 <__ultoa_invert+0x48>
    15f0:	68 94       	set
    15f2:	3f 91       	pop	r19
    15f4:	2a e0       	ldi	r18, 0x0A	; 10
    15f6:	26 9f       	mul	r18, r22
    15f8:	11 24       	eor	r1, r1
    15fa:	30 19       	sub	r19, r0
    15fc:	30 5d       	subi	r19, 0xD0	; 208
    15fe:	31 93       	st	Z+, r19
    1600:	de f6       	brtc	.-74     	; 0x15b8 <__ultoa_invert+0xe>
    1602:	cf 01       	movw	r24, r30
    1604:	08 95       	ret
    1606:	46 2f       	mov	r20, r22
    1608:	47 70       	andi	r20, 0x07	; 7
    160a:	40 5d       	subi	r20, 0xD0	; 208
    160c:	41 93       	st	Z+, r20
    160e:	b3 e0       	ldi	r27, 0x03	; 3
    1610:	0f d0       	rcall	.+30     	; 0x1630 <__ultoa_invert+0x86>
    1612:	c9 f7       	brne	.-14     	; 0x1606 <__ultoa_invert+0x5c>
    1614:	f6 cf       	rjmp	.-20     	; 0x1602 <__ultoa_invert+0x58>
    1616:	46 2f       	mov	r20, r22
    1618:	4f 70       	andi	r20, 0x0F	; 15
    161a:	40 5d       	subi	r20, 0xD0	; 208
    161c:	4a 33       	cpi	r20, 0x3A	; 58
    161e:	18 f0       	brcs	.+6      	; 0x1626 <__ultoa_invert+0x7c>
    1620:	49 5d       	subi	r20, 0xD9	; 217
    1622:	31 fd       	sbrc	r19, 1
    1624:	40 52       	subi	r20, 0x20	; 32
    1626:	41 93       	st	Z+, r20
    1628:	02 d0       	rcall	.+4      	; 0x162e <__ultoa_invert+0x84>
    162a:	a9 f7       	brne	.-22     	; 0x1616 <__ultoa_invert+0x6c>
    162c:	ea cf       	rjmp	.-44     	; 0x1602 <__ultoa_invert+0x58>
    162e:	b4 e0       	ldi	r27, 0x04	; 4
    1630:	a6 95       	lsr	r26
    1632:	97 95       	ror	r25
    1634:	87 95       	ror	r24
    1636:	77 95       	ror	r23
    1638:	67 95       	ror	r22
    163a:	ba 95       	dec	r27
    163c:	c9 f7       	brne	.-14     	; 0x1630 <__ultoa_invert+0x86>
    163e:	00 97       	sbiw	r24, 0x00	; 0
    1640:	61 05       	cpc	r22, r1
    1642:	71 05       	cpc	r23, r1
    1644:	08 95       	ret
    1646:	9b 01       	movw	r18, r22
    1648:	ac 01       	movw	r20, r24
    164a:	0a 2e       	mov	r0, r26
    164c:	06 94       	lsr	r0
    164e:	57 95       	ror	r21
    1650:	47 95       	ror	r20
    1652:	37 95       	ror	r19
    1654:	27 95       	ror	r18
    1656:	ba 95       	dec	r27
    1658:	c9 f7       	brne	.-14     	; 0x164c <__ultoa_invert+0xa2>
    165a:	62 0f       	add	r22, r18
    165c:	73 1f       	adc	r23, r19
    165e:	84 1f       	adc	r24, r20
    1660:	95 1f       	adc	r25, r21
    1662:	a0 1d       	adc	r26, r0
    1664:	08 95       	ret

00001666 <__prologue_saves__>:
    1666:	2f 92       	push	r2
    1668:	3f 92       	push	r3
    166a:	4f 92       	push	r4
    166c:	5f 92       	push	r5
    166e:	6f 92       	push	r6
    1670:	7f 92       	push	r7
    1672:	8f 92       	push	r8
    1674:	9f 92       	push	r9
    1676:	af 92       	push	r10
    1678:	bf 92       	push	r11
    167a:	cf 92       	push	r12
    167c:	df 92       	push	r13
    167e:	ef 92       	push	r14
    1680:	ff 92       	push	r15
    1682:	0f 93       	push	r16
    1684:	1f 93       	push	r17
    1686:	cf 93       	push	r28
    1688:	df 93       	push	r29
    168a:	cd b7       	in	r28, 0x3d	; 61
    168c:	de b7       	in	r29, 0x3e	; 62
    168e:	ca 1b       	sub	r28, r26
    1690:	db 0b       	sbc	r29, r27
    1692:	0f b6       	in	r0, 0x3f	; 63
    1694:	f8 94       	cli
    1696:	de bf       	out	0x3e, r29	; 62
    1698:	0f be       	out	0x3f, r0	; 63
    169a:	cd bf       	out	0x3d, r28	; 61
    169c:	09 94       	ijmp

0000169e <__epilogue_restores__>:
    169e:	2a 88       	ldd	r2, Y+18	; 0x12
    16a0:	39 88       	ldd	r3, Y+17	; 0x11
    16a2:	48 88       	ldd	r4, Y+16	; 0x10
    16a4:	5f 84       	ldd	r5, Y+15	; 0x0f
    16a6:	6e 84       	ldd	r6, Y+14	; 0x0e
    16a8:	7d 84       	ldd	r7, Y+13	; 0x0d
    16aa:	8c 84       	ldd	r8, Y+12	; 0x0c
    16ac:	9b 84       	ldd	r9, Y+11	; 0x0b
    16ae:	aa 84       	ldd	r10, Y+10	; 0x0a
    16b0:	b9 84       	ldd	r11, Y+9	; 0x09
    16b2:	c8 84       	ldd	r12, Y+8	; 0x08
    16b4:	df 80       	ldd	r13, Y+7	; 0x07
    16b6:	ee 80       	ldd	r14, Y+6	; 0x06
    16b8:	fd 80       	ldd	r15, Y+5	; 0x05
    16ba:	0c 81       	ldd	r16, Y+4	; 0x04
    16bc:	1b 81       	ldd	r17, Y+3	; 0x03
    16be:	aa 81       	ldd	r26, Y+2	; 0x02
    16c0:	b9 81       	ldd	r27, Y+1	; 0x01
    16c2:	ce 0f       	add	r28, r30
    16c4:	d1 1d       	adc	r29, r1
    16c6:	0f b6       	in	r0, 0x3f	; 63
    16c8:	f8 94       	cli
    16ca:	de bf       	out	0x3e, r29	; 62
    16cc:	0f be       	out	0x3f, r0	; 63
    16ce:	cd bf       	out	0x3d, r28	; 61
    16d0:	ed 01       	movw	r28, r26
    16d2:	08 95       	ret

000016d4 <_exit>:
    16d4:	f8 94       	cli

000016d6 <__stop_program>:
    16d6:	ff cf       	rjmp	.-2      	; 0x16d6 <__stop_program>
